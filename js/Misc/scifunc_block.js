/* autogenerated from "macros/Misc/scifunc_block.sci" */
function scifunc_block() {
    scifunc_block.prototype.define = function scifunc_block() {
        in1 = 1;
        out = 1;
        clkin = [];
        clkout = [];
        x0 = [];
        z0 = [];
        typ = "c";
        auto = [];
        this.rpar = [];
        model = scicos_model();
        model.sim = list("scifunc",3);
        model.in1 = in1;
        model.out = out;
        model.evtin = clkin;
        model.evtout = clkout;
        model.state = x0;
        model.dstate = z0;
        model.rpar = this.rpar;
        model.ipar = 0;
        model.opar = list();
        model.blocktype = typ;
        model.firing = auto;
        model.dep_ut = [true,false];
        exprs = list([[sci2exp(in1)],[sci2exp(out)],[sci2exp(clkin)],[sci2exp(clkout)],[strcat(sci2exp(x0))],[strcat(sci2exp(z0))],[strcat(sci2exp(this.rpar))],[sci2exp(auto)]],list("y1=sin(u1)"," "," ","y1=sin(u1)"," "," "," "));
        gr_i = [];
        this.x = standard_define([2,2],model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    scifunc_block.prototype.details = function scifunc_block() {
        return this.x;
    }
    scifunc_block.prototype.get = function scifunc_block() {
        var options = {
            i:["input ports sizes",this.i],
            o:["output port sizes",this.o],
            ci:["input event ports sizes",this.ci],
            co:["output events ports sizes",this.co],
            xx:["initial continuous state",this.xx],
            z:["initial discrete state",this.z],
            rpar:["System parameters vector",this.rpar],
            auto0:["initial firing vector (<0 for no firing)",this.auto0],
            deptime:["is block always active (0:no, 1:yes)",this.deptime],
        }
        return options;
    }
    scifunc_block.prototype.set = function scifunc_block() {
        this.i = parseFloat((arguments[0]["i"]))
        this.o = parseFloat((arguments[0]["o"]))
        this.ci = parseFloat((arguments[0]["ci"]))
        this.co = parseFloat((arguments[0]["co"]))
        this.xx = inverse((arguments[0]["xx"]))
        this.z = inverse((arguments[0]["z"]))
        this.rpar = inverse((arguments[0]["rpar"]))
        this.auto0 = parseFloat((arguments[0]["auto0"]))
        this.deptime = parseFloat((arguments[0]["deptime"]))
        this.lab = parseFloat((arguments[0]["lab"]))
        needcompile = 0;
        this.x = arg1;
        model = arg1.model;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        if (size(exprs[1-1],"*")==8) {
            exprs[1-1][9-1] = "0";
        }
        while (true) {
            [ok,this.i,this.o,this.ci,this.co,this.xx,this.z,this.rpar,this.auto0,this.deptime,this.lab] = scicos_getvalue([["Set scifunc_block parameters"],["only regular blocks supported"]],["input ports sizes","output port sizes","input event ports sizes","output events ports sizes","initial continuous state","initial discrete state","System parameters vector","initial firing vector (<0 for no firing)","is block always active (0:no, 1:yes)"],list("vec",-1,"vec",-1,"vec",-1,"vec",-1,"vec",-1,"vec",-1,"vec",-1,"vec","sum(%4)","vec",1),exprs[1-1]);
            if (!ok) {
                break;
            }
            exprs[1-1] = this.lab;
            this.xx = this.xx.slice();
            this.z = this.z.slice();
            this.rpar = this.rpar.slice();
            nrp = prod(size(this.rpar));
            this.i = int(this.i.slice());
            ni = size(this.i,1);
            this.o = int(this.o.slice());
            no = size(this.o,1);
            this.ci = int(this.ci.slice());
            nci = size(this.ci,1);
            this.co = int(this.co.slice());
            nco = size(this.co,1);
            [ok,tt,dep_ut] = genfunc1(exprs[2-1],this.i,this.o,nci,nco,size(this.xx,1),size(this.z,1),nrp,"c");
            dep_ut[2-1] = (1==this.deptime);
            if (!ok) {
                break;
            }
            [model,graphics,ok] = check_io(model,graphics,this.i,this.o,this.ci,this.co);
            if (ok) {
                auto = this.auto0;
                model.state = this.xx;
                model.dstate = this.z;
                model.rpar = this.rpar;
                if (model.ipar!=0) {
                    model.opar = model.ipar;
                    model.ipar = 0;
                }
                if (or(model.opar!=tt)) {
                    needcompile = 4;
                }
                model.opar = tt;
                model.firing = auto;
                model.dep_ut = dep_ut;
                this.x.model = model;
                exprs[2-1] = tt;
                graphics.exprs = exprs;
                this.x.graphics = graphics;
                break;
            }
        }
        needcompile = resume(needcompile)
        return new BasicBlock(this.x);
    }
}
