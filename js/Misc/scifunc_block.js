/* autogenerated from "macros/Misc/scifunc_block.sci" */
function scifunc_block() {
    scifunc_block.prototype.define = function scifunc_block() {
        var in1 = 1;
        var out = 1;
        var clkin = [];
        var clkout = [];
        var x0 = [];
        var z0 = [];
        var typ = "c";
        var auto = [];
        this.rpar = [];
        this.model = scicos_model();
        this.model.sim = list(new ScilabString(["scifunc"]), new ScilabDouble([3]));
        this.model.in = new ScilabDouble([in1]);
        this.model.out = new ScilabDouble([out]);
        this.model.evtin = new ScilabDouble(clkin);
        this.model.evtout = new ScilabDouble(clkout);
        this.model.state = new ScilabDouble(x0);
        this.model.dstate = new ScilabDouble(z0);
        this.model.rpar = new ScilabDouble(this.rpar);
        this.model.ipar = new ScilabDouble([0]);
        this.model.opar = list();
        this.model.blocktype = new ScilabString([typ]);
        this.model.firing = new ScilabDouble(auto);
        this.model.dep_ut = new ScilabDouble([true,false]);
        this.exprs = list([[sci2exp(in1)],[sci2exp(out)],[sci2exp(clkin)],[sci2exp(clkout)],[strcat(sci2exp(x0))],[strcat(sci2exp(z0))],[strcat(sci2exp(this.rpar))],[sci2exp(auto)]],list("y1=sin(u1)"," "," ","y1=sin(u1)"," "," "," "));
        this.gr_i = new ScilabString(["xstringb(orig(1),orig(2),\"scifunc_block\",sz(1),sz(2));"]);
        this.x = standard_define([2,2],this.model,this.exprs,this.gr_i);
        return new BasicBlock(this.x);
    }
    scifunc_block.prototype.details = function scifunc_block() {
        return this.x;
    }
    scifunc_block.prototype.get = function scifunc_block() {
        var options = {
            i:["input ports sizes",this.i],
            o:["output port sizes",this.o],
            ci:["input event ports sizes",this.ci],
            co:["output events ports sizes",this.co],
            xx:["initial continuous state",this.xx],
            z:["initial discrete state",this.z],
            rpar:["System parameters vector",this.rpar],
            auto0:["initial firing vector (<0 for no firing)",this.auto0],
            deptime:["is block always active (0:no, 1:yes)",this.deptime],
        }
        return options;
    }
    scifunc_block.prototype.set = function scifunc_block() {
        this.i = parseFloat(arguments[0]["i"])
        this.o = parseFloat(arguments[0]["o"])
        this.ci = parseFloat(arguments[0]["ci"])
        this.co = parseFloat(arguments[0]["co"])
        this.xx = inverse(arguments[0]["xx"])
        this.z = inverse(arguments[0]["z"])
        this.rpar = inverse(arguments[0]["rpar"])
        this.auto0 = arguments[0]["auto0"]
        this.deptime = arguments[0]["deptime"]
        this.lab = arguments[0]["lab"]
        var needcompile = 0;
        this.exprs = this.graphics.exprs;
        if (size(this.exprs[1-1],"*")==8) {
            this.exprs[1-1][9-1] = "0";
        }
        while (true) {
            [ok,this.i,this.o,this.ci,this.co,this.xx,this.z,this.rpar,this.auto0,this.deptime,this.lab] = scicos_getvalue([["Set scifunc_block parameters"],["only regular blocks supported"]],["input ports sizes","output port sizes","input event ports sizes","output events ports sizes","initial continuous state","initial discrete state","System parameters vector","initial firing vector (<0 for no firing)","is block always active (0:no, 1:yes)"],list("vec",-1,"vec",-1,"vec",-1,"vec",-1,"vec",-1,"vec",-1,"vec",-1,"vec","sum(%4)","vec",1),this.exprs[1-1]);
            if (!ok) {
                break;
            }
            this.exprs[1-1] = this.lab;
            this.xx = this.xx.slice();
            this.z = this.z.slice();
            this.rpar = this.rpar.slice();
            var nrp = prod(size(this.rpar));
            this.i = int(this.i.slice());
            var ni = size(this.i,1);
            this.o = int(this.o.slice());
            var no = size(this.o,1);
            this.ci = int(this.ci.slice());
            var nci = size(this.ci,1);
            this.co = int(this.co.slice());
            var nco = size(this.co,1);
            var tmpvar0 = genfunc1(this.exprs[2-1],this.i,this.o,nci,nco,size(this.xx,1),size(this.z,1),nrp,"c");
            var ok = tmpvar0[0];
            var tt = tmpvar0[1];
            var dep_ut = tmpvar0[2];
            dep_ut[2-1] = (1==this.deptime);
            if (!ok) {
                break;
            }
            var tmpvar1 = check_io(this.model,this.graphics,this.i,this.o,this.ci,this.co);
            this.model = tmpvar1[0];
            this.graphics = tmpvar1[1];
            var ok = tmpvar1[2];
            if (ok) {
                var auto = this.auto0;
                this.model.state = new ScilabDouble(this.xx);
                this.model.dstate = new ScilabDouble(this.z);
                this.model.rpar = new ScilabDouble(this.rpar);
                if (this.model.ipar!=0) {
                    this.model.opar = new ScilabDouble([this.model.ipar]);
                    this.model.ipar = new ScilabDouble([0]);
                }
                if (or(this.model.opar!=tt)) {
                    var needcompile = 4;
                }
                this.model.opar = new ScilabDouble([tt]);
                this.model.firing = new ScilabDouble([auto]);
                this.model.dep_ut = new ScilabDouble([dep_ut]);
                this.x.model = this.model;
                this.exprs[2-1] = tt;
                this.graphics.exprs = new ScilabDouble([this.exprs]);
                this.x.graphics = this.graphics;
                break;
            }
        }
        needcompile = resume(needcompile)
        return new BasicBlock(this.x);
    }
}
