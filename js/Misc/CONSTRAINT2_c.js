/* autogenerated from "macros/Misc/CONSTRAINT2_c.sci" */
function CONSTRAINT2_c() {
    CONSTRAINT2_c.prototype.define = function CONSTRAINT2_c() {
        this.x0 = [0];
        this.xd0 = [0];
        this.id = [0];
        this.model = scicos_model();
        this.model.sim = list(new ScilabString(["constraint_c"]), new ScilabDouble([10004]));
        this.model.in1 = new ScilabDouble([1]);
        this.model.out = new ScilabDouble([1],[1]);
        this.model.state = new ScilabDouble([this.x0],[this.xd0]);
        this.model.ipar = this.id;
        this.model.blocktype = new ScilabString(["c"]);
        this.model.dep_ut = [false,true];
        exprs = list(strcat(sci2exp(this.x0)),strcat(sci2exp(this.xd0)),strcat(sci2exp(this.id)));
        gr_i = [];
        this.x = standard_define([3,2],this.model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    CONSTRAINT2_c.prototype.details = function CONSTRAINT2_c() {
        return this.x;
    }
    CONSTRAINT2_c.prototype.get = function CONSTRAINT2_c() {
        var options = {
            x0:["Initial guess values of states x",this.x0],
            xd0:["Initial guess values of derivative x\'",this.xd0],
            id:["Id(i)=1: if x\'(i) is present in the feedback, else Id(i)=0",this.id],
        }
        return options;
    }
    CONSTRAINT2_c.prototype.set = function CONSTRAINT2_c() {
        this.x0 = inverse(arguments[0]["x0"])
        this.xd0 = inverse(arguments[0]["xd0"])
        this.id = inverse(arguments[0]["id"])
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        this.model = arg1.model;
        while (true) {
            ask_again = false;
            [ok,this.x0,this.xd0,this.id,exprs] = scicos_getvalue("Set Constraint block parameters",["Initial guess values of states x","Initial guess values of derivative x\'","Id(i)=1: if x\'(i) is present in the feedback, else Id(i)=0"],list("vec",-1,"vec",-1,"vec",-1),exprs);
            if (!ok) {
                break;
            }
            this.x0 = this.x0.slice();
            N = size(this.x0,"*");
            this.xd0 = this.xd0.slice();
            Nxd = size(this.xd0,"*");
            this.id = this.id.slice();
            Nid = size(this.id,"*");
            if ((N!=Nxd)||(N!=Nid)) {
                message("incompatible sizes, states, their derivatives, and ID should be the same size ");
                ask_again = true;
            }
            if ((N<=0&&!ask_again)) {
                x_message("number of states (constraints) must be > 0 ");
                ask_again = true;
            }
            if ((!ask_again)) {
                for (i=1;i<=N;i+=1) {
                    if (!((this.id[i-1]==0)||(this.id[i-1]==1))) {
                        ask_again = true;
                        x_message([["Id(i) must be either"],["0 when x\'(i) is not present in the feedback"],["1: when x\'(i) is present in the feedback"]]);
                        break;
                    }
                    if ((this.id[i-1]==0)) {
                        this.id[i-1] = -1;
                    }
                }
            }
            if (!ask_again) {
                graphics.exprs = exprs;
                this.model.state = new ScilabDouble([this.x0],[this.xd0]);
                this.model.out = new ScilabDouble([N],[N]);
                this.model.in1 = new ScilabDouble([N]);
                this.model.ipar = this.id;
                this.x.graphics = graphics;
                this.x.model = this.model;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
}
