/* autogenerated from "macros/Misc/CONSTRAINT_c.sci" */
function CONSTRAINT_c() {
    CONSTRAINT_c.prototype.define = function CONSTRAINT_c() {
        this.x0 = [[0],[0]];
        this.model = scicos_model();
        this.model.sim = list("constraint_c",10004);
        this.model.in1 = new ScilabDouble(1);
        this.model.out = new ScilabDouble(1);
        this.model.ipar = new ScilabDouble(0);
        this.model.state = this.x0;
        this.model.blocktype = new ScilabString("c");
        this.model.dep_ut = [false,true];
        exprs = "0";
        gr_i = [];
        this.x = standard_define([3,2],this.model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    CONSTRAINT_c.prototype.details = function CONSTRAINT_c() {
        return this.x;
    }
    CONSTRAINT_c.prototype.get = function CONSTRAINT_c() {
        var options = {
        }
        return options;
    }
    CONSTRAINT_c.prototype.set = function CONSTRAINT_c() {
        this.x0 = inverse(arguments[0]["x0"])
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        this.model = arg1.model;
        while (true) {
            [ok,this.x0,exprs] = scicos_getvalue("Set solver block parameters","Initial guess values",list("vec",-1),exprs);
            if (!ok) {
                break;
            }
            this.x0 = this.x0.slice();
            N = size(this.x0,"*");
            if (N<=0) {
                message("number of states (constraints) must be > 0 ");
            } else {
                [model,graphics,ok] = check_io(this.model,graphics,N,N,[],[]);
                if (ok) {
                    graphics.exprs = exprs;
                    this.model.state = [[this.x0],[zeros(N,1)]];
                    this.model.out = new ScilabDouble(N);
                    this.model.in1 = new ScilabDouble(N);
                    this.model.ipar = new ScilabDouble(-1*ones(N,1));
                    this.x.graphics = graphics;
                    this.x.model = this.model;
                    break;
                }
            }
        }
        return new BasicBlock(this.x);
    }
}
