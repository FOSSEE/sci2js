/* autogenerated from "macros/Misc/CBLOCK4.sci" */
function CBLOCK4() {
    CBLOCK4.prototype.define = function CBLOCK4() {
        funam = "toto";
        model = scicos_model();
        model.sim = list(" ",2004);
        model.in1 = 1;
        model.in2 = 1;
        model.intyp = 1;
        model.out = 1;
        model.out2 = 1;
        model.outtyp = 1;
        model.dep_ut = [true,false];
        label = list([[funam],["n"],[sci2exp([model.in1,model.in2])],[sci2exp(model.intyp)],[sci2exp([model.out,model.out2])],[sci2exp(model.outtyp)],[sci2exp(model.evtin)],[sci2exp(model.evtout)],[sci2exp(model.state)],[sci2exp(model.dstate)],[sci2exp(model.odstate)],[sci2exp(model.rpar)],[sci2exp(model.ipar)],[sci2exp(model.opar)],[sci2exp(model.nmode)],[sci2exp(model.nzcross)],[sci2exp(model.firing)],["y"],["n"]],[]);
        gr_i = [];
        this.x = standard_define([4,2],model,label,gr_i);
        return new BasicBlock(this.x);
    }
    CBLOCK4.prototype.details = function CBLOCK4() {
        return this.x;
    }
    CBLOCK4.prototype.get = function CBLOCK4() {
        var options = {
            function_name:["Simulation function",this.function_name],
            impli:["Is block implicit? (y,n)",this.impli],
            in1:["Input ports sizes",this.in1],
            it:["Input ports type",this.it],
            out:["Output port sizes",this.out],
            ot:["Output ports type",this.ot],
            ci:["Input event ports sizes",this.ci],
            co:["Output events ports sizes",this.co],
            xx:["Initial continuous state",this.xx],
            z:["Initial discrete state",this.z],
            oz:["Initial object state",this.oz],
            rpar:["Real parameters vector",this.rpar],
            ipar:["Integer parameters vector",this.ipar],
            opar:["Object parameters list",this.opar],
            nmode:["Number of modes",this.nmode],
            nzcr:["Number of zero crossings",this.nzcr],
            auto0:["Initial firing vector (<0 for no firing)",this.auto0],
            depu:["Direct feedthrough (y or n)",this.depu],
            dept:["Time dependence (y or n)",this.dept],
        }
        return options;
    }
    CBLOCK4.prototype.set = function CBLOCK4() {
        this.function_name = parseFloat((arguments[0]["function_name"]))
        this.impli = parseFloat((arguments[0]["impli"]))
        this.in1 = parseFloat((arguments[0]["in1"]))
        this.it = parseFloat((arguments[0]["it"]))
        this.out = parseFloat((arguments[0]["out"]))
        this.ot = parseFloat((arguments[0]["ot"]))
        this.ci = parseFloat((arguments[0]["ci"]))
        this.co = parseFloat((arguments[0]["co"]))
        this.xx = parseFloat((arguments[0]["xx"]))
        this.z = parseFloat((arguments[0]["z"]))
        this.oz = parseFloat((arguments[0]["oz"]))
        this.rpar = parseFloat((arguments[0]["rpar"]))
        this.ipar = parseFloat((arguments[0]["ipar"]))
        this.opar = parseFloat((arguments[0]["opar"]))
        this.nmode = parseFloat((arguments[0]["nmode"]))
        this.nzcr = parseFloat((arguments[0]["nzcr"]))
        this.auto0 = parseFloat((arguments[0]["auto0"]))
        this.depu = parseFloat((arguments[0]["depu"]))
        this.dept = parseFloat((arguments[0]["dept"]))
        this.lab = parseFloat((arguments[0]["lab"]))
        this.x = arg1;
        model = arg1.model;
        graphics = arg1.graphics;
        label = graphics.exprs;
        while (true) {
            [ok,this.function_name,this.impli,this.in1,this.it,this.out,this.ot,this.ci,this.co,this.xx,this.z,this.oz,this.rpar,this.ipar,this.opar,this.nmode,this.nzcr,this.auto0,this.depu,this.dept,this.lab] = scicos_getvalue("Set C-Block4 block parameters",["Simulation function","Is block implicit? (y,n)","Input ports sizes","Input ports type","Output port sizes","Output ports type","Input event ports sizes","Output events ports sizes","Initial continuous state","Initial discrete state","Initial object state","Real parameters vector","Integer parameters vector","Object parameters list","Number of modes","Number of zero crossings","Initial firing vector (<0 for no firing)","Direct feedthrough (y or n)","Time dependence (y or n)"],list("str",1,"str",1,"mat",[-1,2],"vec",-1,"mat",[-1,2],"vec",-1,"vec",-1,"vec",-1,"vec",-1,"vec",-1,"lis",-1,"vec",-1,"vec",-1,"lis",-1,"vec",1,"vec",1,"vec","sum(%8)","str",1,"str",1),label[1-1]);
            if (!ok) {
                break;
            }
            label[1-1] = this.lab;
            funam = stripblanks(this.function_name);
            this.xx = this.xx.slice();
            this.z = this.z.slice();
            this.rpar = this.rpar.slice();
            this.ipar = int(this.ipar.slice());
            nx = size(this.xx,1);
            nz = size(this.z,1);
            this.ci = int(this.ci.slice());
            nevin = size(this.ci,1);
            this.co = int(this.co.slice());
            nevout = size(this.co,1);
            if (part(this.impli,1)=="y") {
                funtyp = 12004;
            } else {
                funtyp = 2004;
            }
            if ([[this.ci],[this.co]]!=[]) {
                if (max([[this.ci],[this.co]])>1) {
                    message("vector event links not supported");
                    ok = false;
                }
            }
            if (ok) {
                this.depu = stripblanks(this.depu);
                if (part(this.depu,1)=="y") {
                    this.depu = true;
                } else {
                    this.depu = false;
                }
                this.dept = stripblanks(this.dept);
                if (part(this.dept,1)=="y") {
                    this.dept = true;
                } else {
                    this.dept = false;
                }
                dep_ut = [this.depu,this.dept];
                if (funam==" ") {
                    break;
                }
                if (model.sim[1-1]!=funam||sign(size(model.state,"*"))!=sign(nx)||sign(size(model.dstate,"*"))!=sign(nz)||model.nzcross!=this.nzcr||sign(size(model.evtout,"*"))!=sign(nevout)) {
                    tt = [];
                }
                tt = label[2-1];
                [model,graphics,ok] = set_io(model,graphics,list(this.in1,this.it),list(this.out,this.ot),this.ci,this.co);
            }
            if (ok) {
                while (true) {
                    [ok,tt,cancel] = this.CC4[funam-1][tt-1];
                    if (!ok) {
                        if (cancel) {
                            break;
                        }
                    } else {
                        model.sim = list(funam,funtyp);
                        model.state = this.xx;
                        model.dstate = this.z;
                        model.odstate = this.oz;
                        model.rpar = this.rpar;
                        model.ipar = this.ipar;
                        model.opar = this.opar;
                        model.firing = this.auto0;
                        model.nzcross = this.nzcr;
                        model.nmode = this.nmode;
                        model.dep_ut = dep_ut;
                        label[2-1] = tt;
                        this.x.model = model;
                        graphics.exprs = label;
                        this.x.graphics = graphics;
                        break;
                    }
                }
                if (ok||cancel) {
                    break;
                }
            }
        }
        return new BasicBlock(this.x);
    }
}
