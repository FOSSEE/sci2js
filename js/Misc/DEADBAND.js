/* autogenerated from "macros/Misc/DEADBAND.sci" */
function DEADBAND() {
    DEADBAND.prototype.define = function DEADBAND() {
        this.minp = -.5;
        this.maxp = .5;
        rpar = [[this.maxp],[this.minp]];
        model = scicos_model();
        model.sim = list("deadband",4);
        model.in1 = 1;
        model.nzcross = 2;
        model.nmode = 1;
        model.out = 1;
        model.rpar = rpar;
        model.blocktype = "c";
        model.dep_ut = [true,false];
        exprs = [[string(this.maxp)],[string(this.minp)],[string(model.nmode)]];
        gr_i = [];
        this.x = standard_define([2,2],model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    DEADBAND.prototype.details = function DEADBAND() {
        return this.x;
    }
    DEADBAND.prototype.get = function DEADBAND() {
        var options = {
            maxp:["End of dead band",this.maxp],
            minp:["Start of dead band",this.minp],
            zeroc:["zero crossing (0:no, 1:yes)",this.zeroc],
        }
        return options;
    }
    DEADBAND.prototype.set = function DEADBAND() {
        this.maxp = parseFloat(arguments[0]["maxp"])
        this.minp = parseFloat(arguments[0]["minp"])
        this.zeroc = arguments[0]["zeroc"]
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        model = arg1.model;
        while (true) {
            [ok,this.maxp,this.minp,this.zeroc,exprs] = scicos_getvalue("Set Deadband parameters",["End of dead band","Start of dead band","zero crossing (0:no, 1:yes)"],list("vec",1,"vec",1,"vec",1),exprs);
            if (!ok) {
                break;
            }
            if (this.maxp<=this.minp) {
                message("Upper limit must be > Lower limit");
            } else {
                rpar = [[this.maxp],[this.minp]];
                model.rpar = rpar;
                if (this.zeroc!=0) {
                    model.nzcross = 2;
                    model.nmode = 1;
                } else {
                    model.nzcross = 0;
                    model.nmode = 0;
                }
                graphics.exprs = exprs;
                this.x.graphics = graphics;
                this.x.model = model;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
}
