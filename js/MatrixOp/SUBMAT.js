/* autogenerated from "macros/MatrixOp/SUBMAT.sci" */
function SUBMAT() {
    SUBMAT.prototype.define = function SUBMAT() {
        this.model = scicos_model();
        function_name = "submat";
        funtyp = 4;
        this.model.sim = list(function_name,funtyp);
        this.model.in1 = new ScilabDouble(-1);
        this.model.in2 = new ScilabDouble(-2);
        this.model.intyp = new ScilabDouble(1);
        this.model.out = new ScilabDouble(-1);
        this.model.out2 = new ScilabDouble(-2);
        this.model.outtyp = new ScilabDouble(1);
        this.model.evtin = [];
        this.model.evtout = [];
        this.model.state = [];
        this.model.dstate = [];
        this.model.rpar = [];
        this.model.ipar = [[1],[1],[1],[1]];
        this.model.blocktype = new ScilabString("c");
        this.model.firing = [];
        this.model.dep_ut = [true,false];
        label = [[sci2exp(1)],[sci2exp(1)],[sci2exp(1)],[sci2exp(1)],[sci2exp(1)]];
        gr_i = [];
        this.x = standard_define([2.5,2],this.model,label,gr_i);
        return new BasicBlock(this.x);
    }
    SUBMAT.prototype.details = function SUBMAT() {
        return this.x;
    }
    SUBMAT.prototype.get = function SUBMAT() {
        var options = {
            typ:["Datatype (1=real double  2=Complex)",this.typ],
            a:["Starting Row Index",this.a],
            b:["Ending Row Index",this.b],
            c:["Starting Column Index",this.c],
            d:["Ending Column Index",this.d],
            inp:["Input Dimensions",this.inp],
        }
        return options;
    }
    SUBMAT.prototype.set = function SUBMAT() {
        this.typ = inverse(arguments[0]["typ"])
        this.a = arguments[0]["a"]
        this.b = arguments[0]["b"]
        this.c = arguments[0]["c"]
        this.d = arguments[0]["d"]
        this.inp = arguments[0]["inp"]
        this.x = arg1;
        graphics = arg1.graphics;
        label = graphics.exprs;
        this.model = arg1.model;
        if (size(label,"*")==5) {
            label[6-1] = sci2exp([1,1]);
        }
        while (true) {
            [ok,this.typ,this.a,this.b,this.c,this.d,this.inp,exprs] = scicos_getvalue("Set SUBMAT Block",["Datatype (1=real double  2=Complex)","Starting Row Index","Ending Row Index","Starting Column Index","Ending Column Index","Input Dimensions"],list("vec",1,"vec",1,"vec",1,"vec",1,"vec",1,"vec",2),label);
            if (!ok) {
                break;
            }
            if ((this.typ==1)) {
                function_name = "submat";
                ot = 1;
                it = 1;
            } else if ((this.typ==2)) {
                function_name = "submatz";
                ot = 2;
                it = 2;
            } else {
                message("Datatype is not supported");
                ok = false;
            }
            if ((this.a<=0)||(this.b<=0)||(this.c<=0)||(this.d<=0)) {
                message("invalid index");
                ok = false;
            }
            if (this.b<this.a) {
                message("ending row must be greater than starting row");
                ok = false;
            }
            if (this.d<this.c) {
                message("ending column must be greater than starting column");
                ok = false;
            }
            if (this.b>this.inp[1-1]) {
                message("index of ending row is out of range");
                ok = false;
            }
            if (this.d>this.inp[2-1]) {
                message("index of ending column is out of range");
                ok = false;
            }
            this.model.ipar = [[this.a],[this.b],[this.c],[this.d]];
            in1 = [this.inp[1-1],this.inp[2-1]];
            out = [(this.b-this.a)+1,(this.d-this.c)+1];
            funtyp = 4;
            label = exprs;
            if (ok) {
                [model,graphics,ok] = set_io(this.model,graphics,list(in1,it),list(out,ot),[],[]);
                this.model.sim = list(function_name,funtyp);
                graphics.exprs = label;
                arg1.graphics = graphics;
                arg1.model = this.model;
                this.x = arg1;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
}
