/* autogenerated from "macros/MatrixOp/MATCATH.sci" */
function MATCATH() {
    MATCATH.prototype.define = function MATCATH() {
        model = scicos_model();
        function_name = "mat_cath";
        funtyp = 4;
        model.sim = list(function_name,funtyp);
        model.in1 = [[-1],[-1]];
        model.in2 = [[-2],[-3]];
        model.intyp = [1,1];
        model.out = -1;
        model.out2 = 0;
        model.outtyp = -1;
        model.evtin = [];
        model.evtout = [];
        model.state = [];
        model.dstate = [];
        model.rpar = [];
        model.ipar = [];
        model.blocktype = "c";
        model.firing = [];
        model.dep_ut = [true,false];
        label = [sci2exp(2)];
        gr_i = [];
        this.x = standard_define([2,3],model,label,gr_i);
        return new BasicBlock(this.x);
    }
    MATCATH.prototype.details = function MATCATH() {
        return this.x;
    }
    MATCATH.prototype.get = function MATCATH() {
        var options = {
            nin:["Number of input",this.nin],
        }
        return options;
    }
    MATCATH.prototype.set = function MATCATH() {
        this.nin = arguments[0]["nin"]
        this.lab = arguments[0]["lab"]
        this.x = arg1;
        model = arg1.model;
        graphics = arg1.graphics;
        label = graphics.exprs;
        if (size(label,"*")>1) {
            label = "size(evstr("+label[2-1]+"),\'*\')";
        }
        while (true) {
            [ok,this.nin,this.lab] = scicos_getvalue("Set MATCATH block parameters",["Number of input"],list("vec",1),label);
            if (!ok) {
                break;
            }
            label = this.lab;
            in1 = [-1*(ones(this.nin,1)),-(transpose([2:this.nin+1]))];
            out = [-1,0];
            it = -1*(ones(this.nin,1));
            ot = -1;
            [model,graphics,ok] = set_io(model,graphics,list(in1,it),list(out,ot),[],[]);
            if (ok) {
                funtyp = 4;
                model.sim = list("mat_cath",funtyp);
                graphics.exprs = label;
                arg1.graphics = graphics;
                arg1.model = model;
                this.x = arg1;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
}
