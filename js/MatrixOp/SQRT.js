/* autogenerated from "macros/MatrixOp/SQRT.sci" */
function SQRT() {
    SQRT.prototype.define = function SQRT() {
        this.model = scicos_model();
        this.model.sim = list(new ScilabString(["mat_sqrt"]), new ScilabDouble([4]));
        this.model.in1 = new ScilabDouble([-1]);
        this.model.in2 = new ScilabDouble([-2]);
        this.model.intyp = new ScilabDouble([1]);
        this.model.outtyp = new ScilabDouble([1]);
        this.model.out = new ScilabDouble([-1]);
        this.model.out2 = new ScilabDouble([-2]);
        this.model.dep_ut = [true,false];
        label = [sci2exp(1)];
        gr_i = [];
        this.x = standard_define([2,2],this.model,label,gr_i);
        return new BasicBlock(this.x);
    }
    SQRT.prototype.details = function SQRT() {
        return this.x;
    }
    SQRT.prototype.get = function SQRT() {
        var options = {
            typ:["Datatype(1=real double  2=Complex)",this.typ],
        }
        return options;
    }
    SQRT.prototype.set = function SQRT() {
        this.typ = inverse(arguments[0]["typ"])
        this.x = arg1;
        graphics = arg1.graphics;
        label = graphics.exprs;
        this.model = arg1.model;
        while (true) {
            [ok,this.typ,exprs] = scicos_getvalue("Set SQRT Block",["Datatype(1=real double  2=Complex)"],list("vec",1),label);
            if (!ok) {
                break;
            }
            if ((this.typ==1)) {
                function_name = "mat_sqrt";
            } else if ((this.typ==2)) {
                function_name = "matz_sqrt";
            } else {
                message("type is not supported");
                ok = false;
            }
            it = this.typ;
            ot = this.typ;
            in1 = [this.model.in1,this.model.in2];
            out = [this.model.out,this.model.out2];
            funtyp = 4;
            if (ok) {
                label = exprs;
                [model,graphics,ok] = set_io(this.model,graphics,list(in1,it),list(out,ot),[],[]);
                this.model.sim = list(new ScilabString([function_name]), new ScilabDouble([funtyp]));
                graphics.exprs = label;
                arg1.graphics = graphics;
                arg1.model = this.model;
                this.x = arg1;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
}
