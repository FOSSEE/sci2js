/* autogenerated from "macros/MatrixOp/SQRT.sci" */
function SQRT() {
    SQRT.prototype.define = function SQRT() {
        model = scicos_model();
        model.sim = list("mat_sqrt",4);
        model.in1 = -1;
        model.in2 = -2;
        model.intyp = 1;
        model.outtyp = 1;
        model.out = -1;
        model.out2 = -2;
        model.dep_ut = [true,false];
        label = [sci2exp(1)];
        gr_i = [];
        this.x = standard_define([2,2],model,label,gr_i);
        return new BasicBlock(this.x);
    }
    SQRT.prototype.details = function SQRT() {
        return this.x;
    }
    SQRT.prototype.get = function SQRT() {
    }
    SQRT.prototype.set = function SQRT() {
        this.typ = parseFloat((arguments[0]["typ"]))
        this.x = arg1;
        graphics = arg1.graphics;
        label = graphics.exprs;
        model = arg1.model;
        while (true) {
            [ok,this.typ,exprs] = scicos_getvalue("Set SQRT Block",["Datatype(1=real double  2=Complex)"],list("vec",1),label);
            if (!ok) {
                break;
            }
            if ((this.typ==1)) {
                function_name = "mat_sqrt";
            } else if ((this.typ==2)) {
                function_name = "matz_sqrt";
            } else {
                message("type is not supported");
                ok = false;
            }
            it = this.typ;
            ot = this.typ;
            in1 = [model.in1,model.in2];
            out = [model.out,model.out2];
            funtyp = 4;
            if (ok) {
                label = exprs;
                [model,graphics,ok] = set_io(model,graphics,list(in1,it),list(out,ot),[],[]);
                model.sim = list(function_name,funtyp);
                graphics.exprs = label;
                arg1.graphics = graphics;
                arg1.model = model;
                this.x = arg1;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
}
