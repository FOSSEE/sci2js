/* autogenerated from "macros/MatrixOp/MATRESH.sci" */
function MATRESH() {
    MATRESH.prototype.define = function MATRESH() {
        model = scicos_model();
        function_name = "mat_reshape";
        funtyp = 4;
        model.sim = list(function_name,funtyp);
        model.in1 = -1;
        model.in2 = -2;
        model.intyp = 1;
        model.out = -1;
        model.out2 = -2;
        model.outtyp = 1;
        model.evtin = [];
        model.evtout = [];
        model.state = [];
        model.dstate = [];
        model.rpar = [];
        model.ipar = [];
        model.blocktype = "c";
        model.firing = [];
        model.dep_ut = [true,false];
        label = [[sci2exp(1)],[sci2exp([1,1])],[sci2exp([1,1])]];
        gr_i = [];
        this.x = standard_define([3,2],model,label,gr_i);
        return new BasicBlock(this.x);
    }
    MATRESH.prototype.details = function MATRESH() {
        return this.x;
    }
    MATRESH.prototype.get = function MATRESH() {
        var options = {
            typ:["Datatype(1=real double  2=Complex)",this.typ],
            l1:["input size",this.l1],
            out:["output size desired",this.out],
        }
        return options;
    }
    MATRESH.prototype.set = function MATRESH() {
        this.typ = parseFloat((arguments[0]["typ"]))
        this.l1 = parseFloat((arguments[0]["l1"]))
        this.out = parseFloat((arguments[0]["out"]))
        this.lab = parseFloat((arguments[0]["lab"]))
        this.x = arg1;
        model = arg1.model;
        graphics = arg1.graphics;
        label = graphics.exprs;
        if (size(label,"*")==14) {
            label[9-1] = [];
        }
        while (true) {
            [ok,this.typ,this.l1,this.out,this.lab] = scicos_getvalue("Set MATRESH block parameters",["Datatype(1=real double  2=Complex)","input size","output size desired"],list("vec",-1,"vec",-1,"vec",-1),label);
            if (!ok) {
                break;
            }
            nout = size(this.out);
            nin = size(this.l1);
            if (nout==0) {
                message("output must have at least one element");
                ok = false;
            }
            if (nin==0) {
                message("input must have at least one element");
                ok = false;
            }
            if (ok) {
                if (((this.out[1-1]>(this.l1[1-1]*this.l1[2-1])))) {
                    message("the first dimension of the output is too big");
                    ok = false;
                }
                if (((this.out[2-1]>(this.l1[1-1]*this.l1[2-1])))) {
                    message("the second dimension of the output is too big");
                    ok = false;
                }
                if ((((this.out[2-1]*this.out[1-1])>(this.l1[1-1]*this.l1[2-1])))) {
                    message("the dimensions of the output are too big");
                    ok = false;
                }
            }
            if ((this.typ==1)) {
                function_name = "mat_reshape";
                ot = 1;
                it = 1;
            } else if ((this.typ==2)) {
                function_name = "matz_reshape";
                ot = 2;
                it = 2;
            } else {
                message("Datatype is not supported");
                ok = false;
            }
            if (ok) {
                label = this.lab;
                [model,graphics,ok] = set_io(model,graphics,list(this.l1,it),list(this.out,ot),[],[]);
            }
            if (ok) {
                funtyp = 4;
                model.sim = list(function_name,funtyp);
                graphics.exprs = label;
                arg1.graphics = graphics;
                arg1.model = model;
                this.x = arg1;
                break;
            }
        }
        needcompile = resume(needcompile)
        return new BasicBlock(this.x);
    }
}
