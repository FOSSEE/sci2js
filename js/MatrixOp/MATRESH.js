/* autogenerated from "macros/MatrixOp/MATRESH.sci" */
function MATRESH() {
MATRESH.prototype.get = function MATRESH() {
}
MATRESH.prototype.set = function MATRESH() {
x=arg1;
model=arg1.model;
graphics=arg1.graphics;
label=graphics.exprs;
if (size(label,"*")==14) {
label[9-1]=[];
}
while (true) {
[ok,typ,l1,out,lab]=scicos_getvalue("Set MATRESH block parameters",["Datatype(1=real double  2=Complex)","input size","output size desired"],list("vec",-1,"vec",-1,"vec",-1),label);
if (!ok) {
break
}
nout=size(out);
nin=size(l1);
if (nout==0) {
message("output must have at least one element");
ok=None;
}
if (nin==0) {
message("input must have at least one element");
ok=None;
}
if (ok) {
if (((out(1)>(l1(1)*l1(2))))) {
message("the first dimension of the output is too big");
ok=None;
}
if (((out(2)>(l1(1)*l1(2))))) {
message("the second dimension of the output is too big");
ok=None;
}
if ((((out(2)*out(1))>(l1(1)*l1(2))))) {
message("the dimensions of the output are too big");
ok=None;
}
}
if ((typ==1)) {
function_name="mat_reshape";
ot=1;
it=1;
} else if ((typ==2)) {
function_name="matz_reshape";
ot=2;
it=2;
} else {
message("Datatype is not supported");
ok=None;
}
if (ok) {
label=lab;
[model,graphics,ok]=set_io(model,graphics,list(l1,it),list(out,ot),[],[]);
}
if (ok) {
funtyp=4;
model.sim=list(function_name,funtyp);
graphics.exprs=label;
arg1.graphics=graphics;
arg1.model=model;
x=arg1;
break
}
}
needcompile=resume(needcompile)
}
MATRESH.prototype.define = function MATRESH() {
model=scicos_model();
function_name="mat_reshape";
funtyp=4;
model.sim=list(function_name,funtyp);
model.in1=-1;
model.in2=-2;
model.intyp=1;
model.out=-1;
model.out2=-2;
model.outtyp=1;
model.evtin=[];
model.evtout=[];
model.state=[];
model.dstate=[];
model.rpar=[];
model.ipar=[];
model.blocktype="c";
model.firing=[];
model.dep_ut=[true,None];
label=[sci2exp(1),sci2exp([1,1]),sci2exp([1,1])];
gr_i=[];
x=standard_define([3,2],model,label,gr_i);
}
MATRESH.prototype.details = function MATRESH() {
}
}
