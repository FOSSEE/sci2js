/* autogenerated from "macros/Sinks/TOWS_c.sci" */
function TOWS_c() {
    TOWS_c.prototype.define = function TOWS_c() {
        nu = -1;
        this.nz = 128;
        this.varnam = "A";
        this.herit = 0;
        model = scicos_model();
        model.sim = list("tows_c",4);
        model.in1 = [nu];
        model.in2 = -2;
        model.intyp = -1;
        model.out = [];
        model.evtin = [1];
        model.evtout = [];
        model.rpar = [];
        model.ipar = [[this.nz],[length(this.varnam)],[transpose(this.ascii[this.varnam-1])]];
        model.blocktype = "d";
        model.firing = [];
        model.dep_ut = [false,false];
        gr_i = [];
        exprs = [[string(this.nz)],[string(this.varnam)],[string(this.herit)]];
        this.x = standard_define([4,2],model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    TOWS_c.prototype.details = function TOWS_c() {
        return this.x;
    }
    TOWS_c.prototype.get = function TOWS_c() {
    }
    TOWS_c.prototype.set = function TOWS_c() {
        this.x = arg1;
        graphics = arg1.graphics;
        model = arg1.model;
        exprs = graphics.exprs;
        while (true) {
            [ok,this.nz,this.varnam,this.herit,exprs] = scicos_getvalue("Set Xcos buffer block",[["Size of buffer"],["Scilab variable name"],["Inherit (no:0, yes:1)"]],list("vec",1,"str",1,"vec",1),exprs);
            if (!ok) {
                break;
            }
            if ((this.nz<=0)) {
                message("Size of buffer must be positive");
                ok = false;
            }
            r = false;
            ierr = execstr("r = validvar(varnam)","errcatch");
            if (!r||ierr!=0||length(this.varnam)>19) {
                message([["Invalid variable name."],["Please choose another variable name."]]);
                ok = false;
            }
            execstr("if type("+this.varnam+") <> 17 | or(fieldnames("+this.varnam+") <> [\"values\"; \"time\"]) then"+" message([\"Protected variable name.\"; \"Please choose another variable name.\"]);"+" ok = %f;"+" end","errcatch");
            if (ok) {
                [model,graphics,ok] = set_io(model,graphics,list([-1,-2],-1),list(),ones(1-this.herit,1),[]);
                if (this.herit==1) {
                    model.blocktype = "x";
                } else {
                    model.blocktype = "d";
                }
                model.ipar = [[this.nz],[length(this.varnam)],[transpose(this.ascii[this.varnam-1])]];
                graphics.exprs = exprs;
                this.x.graphics = graphics;
                this.x.model = model;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
}
