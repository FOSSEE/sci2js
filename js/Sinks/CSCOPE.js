/* autogenerated from "macros/Sinks/CSCOPE.sci" */
function CSCOPE() {
CSCOPE.prototype.get = function CSCOPE() {
}
CSCOPE.prototype.set = function CSCOPE() {
x=arg1;
graphics=arg1.graphics;
exprs=graphics.exprs;
model=arg1.model;
while (true) {
[ok,clrs,win,wpos,wdim,ymin,ymax,per,N,heritance,nom,exprs]=scicos_getvalue("Set Scope parameters",["Color (>0) or mark (<0) vector (8 entries)","Output window number (-1 for automatic)","Output window position","Output window sizes","Ymin","Ymax","Refresh period","Buffer size","Accept herited events 0/1","Name of Scope (label&Id)"],list("vec",8,"vec",1,"vec",-1,"vec",-1,"vec",1,"vec",1,"vec",1,"vec",1,"vec",1,"str",1),exprs);
if (!ok) {
break
}
mess=[];
if (size(wpos,"*")!=0&&size(wpos,"*")!=2) {
mess=[mess,"Window position must be [] or a 2 vector"," "];
ok=None;
}
if (size(wdim,"*")!=0&&size(wdim,"*")!=2) {
mess=[mess,"Window dim must be [] or a 2 vector"," "];
ok=None;
}
if (win<-1) {
mess=[mess,"Window number can\'t be  < -1"," "];
ok=None;
}
if (per<=0) {
mess=[mess,"Refresh period must be positive"," "];
ok=None;
}
if (N<2) {
mess=[mess,"Buffer size must be at least 2"," "];
ok=None;
}
if (ymin>=ymax) {
mess=[mess,"Ymax must be greater than Ymin"," "];
ok=None;
}
if (!or(heritance==[0,1])) {
mess=[mess,"Accept herited events must be 0 or 1"," "];
ok=None;
}
if (!ok) {
message(["Some specified values are inconsistent:"," ",mess]);
}
if (ok) {
[model,graphics,ok]=set_io(model,graphics,list([-1,1],1),list(),ones(1-heritance,1),[]);
}
if (ok) {
if (wpos==[]) {
wpos=[-1,-1];
}
if (wdim==[]) {
wdim=[-1,-1];
}
rpar=[0,ymin,ymax,per];
ipar=[win,1,N,clrs.slice(),wpos.slice(),wdim.slice()];
model.rpar=rpar;
model.ipar=ipar;
model.evtin=ones(1-heritance,1);
model.label=nom;
graphics.id=nom;
graphics.exprs=exprs;
x.graphics=graphics;
x.model=model;
break
}
}
}
CSCOPE.prototype.define = function CSCOPE() {
win=-1;
wdim=[600,400];
wpos=[-1,-1];
clrs=[1,3,5,7,9,11,13,15];
N=20;
ymin=-15;
ymax=+15;
per=30;
model=scicos_model();
model.sim=list("cscope",4);
model.in=-1;
model.in2=1;
model.evtin=1;
model.rpar=[0,ymin,ymax,per];
model.ipar=[win,1,N,clrs,wpos,wdim];
model.blocktype="c";
model.dep_ut=[true,None];
exprs=[strcat(string(clrs)," "),string(win),sci2exp([]),sci2exp(wdim),string(ymin),string(ymax),string(per),string(N),transpose(string(0)),emptystr()];
gr_i=[];
x=standard_define([2,2],model,exprs,gr_i);
}
CSCOPE.prototype.details = function CSCOPE() {
}
}
