/* autogenerated from "macros/Branching/CLKFROM.sci" */
function CLKFROM() {
    CLKFROM.prototype.define = function CLKFROM() {
        this.model = scicos_model();
        this.model.sim = new ScilabString(["clkfrom"]);
        this.model.evtout = new ScilabDouble([1]);
        this.model.opar = list(new ScilabString(["A"]));
        this.model.blocktype = new ScilabString(["d"]);
        this.model.firing = new ScilabDouble([-1]);
        this.model.dep_ut = new ScilabBoolean([false,false]);
        var exprs = "A";
        this.x = new standard_define(new ScilabDouble([2,1]),this.model,new ScilabString([exprs])," ");
        this.x.graphics.id = "From";
        return new BasicBlock(this.x);
    }
    CLKFROM.prototype.details = function CLKFROM() {
        return this.x;
    }
    CLKFROM.prototype.get = function CLKFROM() {
        var exprs = this.graphics.exprs;
        this.set_param_popup_title = "Set block parameters";
        var options = {
            tag:["Tag",this.tag],
        }
        return options;
    }
    CLKFROM.prototype.set = function CLKFROM() {
        var exprs = this.graphics.exprs;
        while (true) {
            var ok = true;
            this.tag = arguments[0]["tag"];
            var exprs = [arguments[0]["tag"]];
            if (!ok) {
                break;
            }
            if (this.model.opar!=list(this.tag)) {
                var needcompile = 4;
                var y = needcompile;
            }
            this.model.opar = list(new ScilabDouble([this.tag]));
            this.model.evtout = new ScilabDouble([1]);
            this.model.firing = new ScilabDouble([-1]);
            this.graphics.exprs = new ScilabDouble([exprs]);
            this.x.graphics = this.graphics;
            this.x.model = this.model;
            break;
        }
        needcompile = resume(needcompile)
        return new BasicBlock(this.x);
    }
    CLKFROM.prototype.get_popup_title = function CLKFROM() {
        return this.set_param_popup_title;
    }
    CLKFROM.prototype.importset = function CLKFROM() {
        var graphics = this.x.graphics;
        var ary = getData(graphics.exprs);
        this.tag = ary[0];
    }
    CLKFROM.prototype.getContainer = function CLKFROM() { return new BasicBlock(this.x); }
}
