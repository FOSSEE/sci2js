/* autogenerated from "macros/Branching/GOTO.sci" */
function GOTO() {
    GOTO.prototype.define = function GOTO() {
        model = scicos_model();
        model.sim = "goto";
        model.in1 = -1;
        model.in2 = -2;
        model.intyp = -1;
        model.out = [];
        model.out2 = [];
        model.outtyp = 1;
        model.ipar = int(1);
        model.opar = list("A");
        model.blocktype = "c";
        model.dep_ut = [false,false];
        exprs = [["A"],[sci2exp(1)]];
        gr_i = [];
        this.x = standard_define([2,1],model,exprs,gr_i);
        this.x.graphics.id = "Goto";
        return new BasicBlock(this.x);
    }
    GOTO.prototype.details = function GOTO() {
        return this.x;
    }
    GOTO.prototype.get = function GOTO() {
        var options = {
            tag:["Tag",this.tag],
            tagvis:["Tag Visibility(1=Local 2=scoped 3= global)",this.tagvis],
        }
        return options;
    }
    GOTO.prototype.set = function GOTO() {
        this.tag = parseFloat((arguments[0]["tag"]))
        this.tagvis = parseFloat((arguments[0]["tagvis"]))
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        model = arg1.model;
        while (true) {
            [ok,this.tag,this.tagvis,exprs] = scicos_getvalue("Set parameters",["Tag","Tag Visibility(1=Local 2=scoped 3= global)"],list("str",-1,"vec",1),exprs);
            if (!ok) {
                break;
            }
            this.tagvis = int(this.tagvis);
            if (((this.tagvis<1)||(this.tagvis>3))) {
                message("Tag Visibility must be between 1 and 3");
                ok = false;
            }
            if (ok) {
                if (((model.ipar!=this.tagvis)||(model.opar!=list(this.tag)))) {
                    needcompile = 4;
                    y = needcompile;
                }
                graphics.exprs = exprs;
                model.opar = list(this.tag);
                model.ipar = this.tagvis;
                this.x.model = model;
                this.x.graphics = graphics;
                arg1 = this.x;
                break;
            }
        }
        needcompile = resume(needcompile)
        return new BasicBlock(this.x);
    }
}
