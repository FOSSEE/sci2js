/* autogenerated from "macros/Branching/GOTO.sci" */
function GOTO() {
    GOTO.prototype.define = function GOTO() {
        this.model = scicos_model();
        this.model.sim = new ScilabString(["goto"]);
        this.model.in1 = new ScilabDouble([-1]);
        this.model.in2 = new ScilabDouble([-2]);
        this.model.intyp = new ScilabDouble([-1]);
        this.model.out = [];
        this.model.out2 = [];
        this.model.outtyp = new ScilabDouble([1]);
        this.model.ipar = new ScilabDouble([int(1)]);
        this.model.opar = list(new ScilabString(["A"]));
        this.model.blocktype = new ScilabString(["c"]);
        this.model.dep_ut = [false,false];
        exprs = [["A"],[sci2exp(1)]];
        gr_i = [];
        this.x = standard_define([2,1],this.model,exprs,gr_i);
        this.x.graphics.id = "Goto";
        return new BasicBlock(this.x);
    }
    GOTO.prototype.details = function GOTO() {
        return this.x;
    }
    GOTO.prototype.get = function GOTO() {
        var options = {
            tag:["Tag",this.tag],
            tagvis:["Tag Visibility(1=Local 2=scoped 3= global)",this.tagvis],
        }
        return options;
    }
    GOTO.prototype.set = function GOTO() {
        this.tag = arguments[0]["tag"]
        this.tagvis = parseFloat(arguments[0]["tagvis"])
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        this.model = arg1.model;
        while (true) {
            [ok,this.tag,this.tagvis,exprs] = scicos_getvalue("Set parameters",["Tag","Tag Visibility(1=Local 2=scoped 3= global)"],list("str",-1,"vec",1),exprs);
            if (!ok) {
                break;
            }
            this.tagvis = int(this.tagvis);
            if (((this.tagvis<1)||(this.tagvis>3))) {
                message("Tag Visibility must be between 1 and 3");
                ok = false;
            }
            if (ok) {
                if (((this.model.ipar!=this.tagvis)||(this.model.opar!=list(this.tag)))) {
                    needcompile = 4;
                    y = needcompile;
                }
                graphics.exprs = exprs;
                this.model.opar = list(new ScilabDouble([this.tag]));
                this.model.ipar = new ScilabDouble([this.tagvis]);
                this.x.model = this.model;
                this.x.graphics = graphics;
                arg1 = this.x;
                break;
            }
        }
        needcompile = resume(needcompile)
        return new BasicBlock(this.x);
    }
}
