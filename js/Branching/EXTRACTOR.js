/* autogenerated from "macros/Branching/EXTRACTOR.sci" */
function EXTRACTOR() {
    EXTRACTOR.prototype.define = function EXTRACTOR() {
        this.ind = 1;
        this.model = scicos_model();
        this.model.sim = list(new ScilabString(["extractor"]), new ScilabDouble([4]));
        this.model.in = new ScilabDouble([-1]);
        this.model.out = new ScilabDouble([1]);
        this.model.blocktype = new ScilabString(["c"]);
        this.model.dep_ut = new ScilabBoolean([true,false]);
        this.model.ipar = new ScilabDouble([this.ind]);
        this.exprs = [sci2exp(this.ind)];
        this.gr_i = new ScilabString(["xstringb(orig(1),orig(2),\"EXTRACTOR\",sz(1),sz(2));"]);
        this.x = new standard_define(new ScilabDouble([3,2]),this.model,new ScilabString(this.exprs),this.gr_i);
        return new BasicBlock(this.x);
    }
    EXTRACTOR.prototype.details = function EXTRACTOR() {
        return this.x;
    }
    EXTRACTOR.prototype.get = function EXTRACTOR() {
        var options = {
            ind:["indices to extract",this.ind],
        }
        return options;
    }
    EXTRACTOR.prototype.set = function EXTRACTOR() {
        this.exprs = this.graphics.exprs;
        while (true) {
            var ok = true;
            this.ind = parseFloat(arguments[0]["ind"]);
            if (!ok) {
                break;
            }
            this.ind = int(this.ind);
            this.ind = this.ind.slice();
            var tmpvar0 = check_io(this.model,this.graphics,[-1],size(this.ind,1),[],[]);
            this.model = tmpvar0[0];
            this.graphics = tmpvar0[1];
            var ok = tmpvar0[2];
            if (ok) {
                this.model.ipar = new ScilabDouble(this.ind);
                this.graphics.exprs = new ScilabDouble([this.exprs]);
                this.x.graphics = this.graphics;
                this.x.model = this.model;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
}
