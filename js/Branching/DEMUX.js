/* autogenerated from "macros/Branching/DEMUX.sci" */
function DEMUX() {
    DEMUX.prototype.define = function DEMUX() {
        out = 2;
        model = scicos_model();
        model.sim = list("multiplex",4);
        model.in1 = 0;
        model.out = -transpose([1:out]);
        model.ipar = out;
        model.blocktype = "c";
        model.firing = [];
        model.dep_ut = [true,false];
        exprs = string(out);
        gr_i = [];
        this.x = standard_define([.5,2],model,exprs,gr_i);
    }
    DEMUX.prototype.details = function DEMUX() {
        return this.x;
    }
    DEMUX.prototype.get = function DEMUX() {
    }
    DEMUX.prototype.set = function DEMUX() {
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        model = arg1.model;
        while (true) {
            [ok,out,exprs] = scicos_getvalue("Set DEMUX block parameters",["number of output ports or vector of sizes"],list("intvec",-1),exprs);
            if (!ok) {
                break;
            }
            if (size(out,"*")==1) {
                if (out<2||out>31) {
                    message("Block must have at least 2 and at most 31 output ports");
                    ok = false;
                } else {
                    [model,graphics,ok] = check_io(model,graphics,0,-transpose([1:out]),[],[]);
                }
            } else {
                if (size(out,"*")<2||or(out==0)||size(out,"*")>31) {
                    message([["Block must have at least 2 and at most 31 output ports"],["size 0 is not allowed"]]);
                    ok = false;
                } else {
                    if (min(out)<0) {
                        nin = 0;
                    } else {
                        nin = sum(out);
                    }
                    [model,graphics,ok] = check_io(model,graphics,nin,out.slice(),[],[]);
                    if (ok) {
                        out = size(out,"*");
                    }
                }
            }
            if (ok) {
                graphics.exprs = exprs;
                model.ipar = out;
                this.x.graphics = graphics;
                this.x.model = model;
                break;
            }
        }
    }
}
