/* autogenerated from "macros/Branching/MUX.sci" */
function MUX() {
    MUX.prototype.define = function MUX() {
        this.in1 = 2;
        model = scicos_model();
        model.sim = list("multiplex",4);
        model.in1 = -transpose([1:this.in1]);
        model.out = 0;
        model.ipar = this.in1;
        model.blocktype = "c";
        model.dep_ut = [true,false];
        exprs = string(this.in1);
        gr_i = [];
        this.x = standard_define([.5,2],model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    MUX.prototype.details = function MUX() {
        return this.x;
    }
    MUX.prototype.get = function MUX() {
    }
    MUX.prototype.set = function MUX() {
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        model = arg1.model;
        while (true) {
            [ok,this.in1,exprs] = scicos_getvalue("Set MUX block parameters","number of input ports or vector of sizes",list("intvec",-1),exprs);
            if (!ok) {
                break;
            }
            if (size(this.in1,"*")==1) {
                if (this.in1<2||this.in1>31) {
                    message("Block must have at least two input ports and at most 31");
                    ok = false;
                } else {
                    [model,graphics,ok] = check_io(model,graphics,-transpose([1:this.in1]),0,[],[]);
                }
            } else {
                if (size(this.in1,"*")<2||or(this.in1==0)||size(this.in1,"*")>31) {
                    message([["Block must have at least two input ports"],["and at most 31. Size 0 is not allowed. "]]);
                    ok = false;
                } else {
                    if (min(this.in1)<0) {
                        nout = 0;
                    } else {
                        nout = sum(this.in1);
                    }
                    [model,graphics,ok] = check_io(model,graphics,this.in1.slice(),nout,[],[]);
                    if (ok) {
                        this.in1 = size(this.in1,"*");
                    }
                }
            }
            if (ok) {
                graphics.exprs = exprs;
                model.ipar = this.in1;
                this.x.graphics = graphics;
                this.x.model = model;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
}
