/* autogenerated from "macros/Events/EVTDLY_f.sci" */
function EVTDLY_f() {
    EVTDLY_f.prototype.define = function EVTDLY_f() {
        this.dt = 0.1;
        this.ff = this.dt;
        model = scicos_model();
        model.sim = "evtdly";
        model.evtin = 1;
        model.evtout = 1;
        model.rpar = this.dt;
        model.blocktype = "d";
        model.firing = this.ff;
        model.dep_ut = [false,false];
        exprs = [[string(this.dt)],[sci2exp(this.ff)]];
        gr_i = [];
        this.x = standard_define([2,2],model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    EVTDLY_f.prototype.details = function EVTDLY_f() {
        return this.x;
    }
    EVTDLY_f.prototype.get = function EVTDLY_f() {
    }
    EVTDLY_f.prototype.set = function EVTDLY_f() {
        this.dt = parseFloat((arguments[0]["dt"]))
        this.ff = parseFloat((arguments[0]["ff"]))
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        model = arg1.model;
        while (true) {
            [ok,this.dt,this.ff,exprs] = scicos_getvalue([["Set Event Delay  block parameters"],["Delay  is the delay between an input event "],["       and the generated output event"],["Block may initially generate an output event before "],["       any input event. \"Date of initial output event\""],["       gives the date of this event. Set a negative value"],["       if no initial event required"]],["Delay","Date of initial output event"],list("vec",1,"vec",1),exprs);
            if (!ok) {
                break;
            }
            if (this.dt<=0) {
                message("Delay must be positive");
                ok = false;
            }
            if (ok) {
                graphics.exprs = exprs;
                model.rpar = this.dt;
                model.firing = this.ff;
                this.x.graphics = graphics;
                this.x.model = model;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
}
