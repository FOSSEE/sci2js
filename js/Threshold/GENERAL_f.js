/* autogenerated from "macros/Threshold/GENERAL_f.sci" */
function GENERAL_f() {
    GENERAL_f.prototype.define = function GENERAL_f() {
        rpar = [[0],[0],[0],[0]];
        this.in1 = 1;
        this.out = 1;
        model = scicos_model();
        model.sim = list("zcross",1);
        model.nzcross = this.in1;
        model.in1 = this.in1;
        model.evtout = ones(this.out,1);
        model.rpar = [[0],[0],[0],[0]];
        model.blocktype = "z";
        model.firing = -ones(this.out,1);
        model.dep_ut = [true,false];
        exprs = [[strcat(sci2exp(this.in1))],[strcat(sci2exp(this.out))]];
        gr_i = [];
        this.x = standard_define([3,2],model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    GENERAL_f.prototype.details = function GENERAL_f() {
        return this.x;
    }
    GENERAL_f.prototype.get = function GENERAL_f() {
        var options = {
        in1:["Input size",this.in1],
        out:["Number of event output",this.out],
        }
        return options;
    }
    GENERAL_f.prototype.set = function GENERAL_f() {
        this.in1 = parseFloat((arguments[0]["in1"]))
        this.out = parseFloat((arguments[0]["out"]))
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        model = arg1.model;
        rpar = model.rpar;
        this.in1 = model.in1;
        this.out = model.evtout;
        nin = sum(this.in1);
        nout = sum(this.out);
        [ok,this.in1,this.out,exprs] = scicos_getvalue("Set General Zero-Crossing parameters",["Input size","Number of event output"],list("vec",1,"vec",1),exprs);
        if (ok) {
            [model,graphics,ok] = check_io(model,graphics,this.in1,[],[],ones(this.out,1));
            if (ok) {
                nout1 = this.out;
                nin1 = this.in1;
                if (nout==nout1&&nin==nin1) {
                    rp = matrix(rpar,nout,2^(2*nin));
                } else {
                    rp = -1*ones(nout1,2^(2*nin1));
                }
                n = size(rp,2)/2;
                result = x_mdialog("routing matrix",string(1,nout1),string(1,2^(2*nin1)),string(rp.slice().slice()));
                if (result!=[]) {
                    rp.slice(1-1,nout1).slice(1-1,2*n) = evstr(result);
                    model.nzcross = this.in1;
                    model.rpar = rp.slice();
                    model.firing = -ones(this.out,1);
                    graphics.exprs = exprs;
                    this.x.graphics = graphics;
                    this.x.model = model;
                }
            }
        }
        return new BasicBlock(this.x);
    }
}
