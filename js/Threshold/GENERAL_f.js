/* autogenerated from "macros/Threshold/GENERAL_f.sci" */
function GENERAL_f() {
    GENERAL_f.prototype.define = function GENERAL_f() {
        var rpar = [[0],[0],[0],[0]];
        this.in1 = 1;
        this.out = 1;
        this.model = scicos_model();
        this.model.sim = list(new ScilabString(["zcross"]), new ScilabDouble([1]));
        this.model.nzcross = new ScilabDouble([this.in1]);
        this.model.in1 = new ScilabDouble([this.in1]);
        this.model.evtout = new ScilabDouble([ones(this.out,1)]);
        this.model.rpar = new ScilabDouble([0],[0],[0],[0]);
        this.model.blocktype = new ScilabString(["z"]);
        this.model.firing = new ScilabDouble([-ones(this.out,1)]);
        this.model.dep_ut = new ScilabDouble([true,false]);
        var exprs = [[strcat(sci2exp(this.in1))],[strcat(sci2exp(this.out))]];
        var gr_i = [];
        this.x = standard_define([3,2],this.model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    GENERAL_f.prototype.details = function GENERAL_f() {
        return this.x;
    }
    GENERAL_f.prototype.get = function GENERAL_f() {
        var options = {
        in1:["Input size",this.in1],
        out:["Number of event output",this.out],
        }
        return options;
    }
    GENERAL_f.prototype.set = function GENERAL_f() {
        this.in1 = parseFloat(arguments[0]["in1"])
        this.out = parseFloat(arguments[0]["out"])
        this.x = arg1;
        var graphics = arg1.graphics;
        var exprs = graphics.exprs;
        this.model = arg1.model;
        var rpar = this.model.rpar;
        this.in1 = this.model.in1;
        this.out = this.model.evtout;
        var nin = sum(this.in1);
        var nout = sum(this.out);
        [ok,this.in1,this.out,exprs] = scicos_getvalue("Set General Zero-Crossing parameters",["Input size","Number of event output"],list("vec",1,"vec",1),exprs);
        if (ok) {
            var tmpvar0 = check_io(this.model,graphics,this.in1,[],[],ones(this.out,1))
            this.model = tmpvar0[0]
            var graphics = tmpvar0[1]
            var ok = tmpvar0[2];
            if (ok) {
                var nout1 = this.out;
                var nin1 = this.in1;
                if (nout==nout1&&nin==nin1) {
                    var rp = matrix(rpar,nout,2^(2*nin));
                } else {
                    var rp = -1*ones(nout1,2^(2*nin1));
                }
                var n = size(rp,2)/2;
                var result = x_mdialog("routing matrix",string(1,nout1),string(1,2^(2*nin1)),string(rp.slice().slice()));
                if (result!=[]) {
                    rp.slice(1-1,nout1).slice(1-1,2*n) = evstr(result);
                    this.model.nzcross = new ScilabDouble([this.in1]);
                    this.model.rpar = new ScilabDouble(rp.slice());
                    this.model.firing = new ScilabDouble([-ones(this.out,1)]);
                    graphics.exprs = exprs;
                    this.x.graphics = graphics;
                    this.x.model = this.model;
                }
            }
        }
        return new BasicBlock(this.x);
    }
}
