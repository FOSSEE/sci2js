/* autogenerated from "macros/IntegerOp/LOGIC.sci" */
function LOGIC() {
    LOGIC.prototype.define = function LOGIC() {
        this.mat = [[0],[0],[0],[1]];
        model = scicos_model();
        model.sim = list("logic",4);
        model.in1 = [[1],[1]];
        model.in2 = [[1],[1]];
        model.out = 1;
        model.out2 = 1;
        model.evtin = 1;
        model.intyp = [5,5];
        model.outtyp = 5;
        model.opar = list(int8(this.mat));
        model.blocktype = "c";
        model.firing = false;
        model.dep_ut = [true,false];
        exprs = [[sci2exp(this.mat)],[sci2exp(0)]];
        gr_i = [];
        this.x = standard_define([2,2],model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    LOGIC.prototype.details = function LOGIC() {
        return this.x;
    }
    LOGIC.prototype.get = function LOGIC() {
    }
    LOGIC.prototype.set = function LOGIC() {
        this.mat = parseFloat((arguments[0]["mat"]))
        this.herit = parseFloat((arguments[0]["herit"]))
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        model = arg1.model;
        while (true) {
            [ok,this.mat,this.herit,exprs] = scicos_getvalue([[msprintf("Set %s block parameters","LOGIC")],[" "],["Combinatorial logic"],[" "],["&nbsp; Rows of the matrix are the output values"],["&nbsp; Number of rows must be a power of two."],["&nbsp; Number of columns gives the number of outputs."],[" "]],["Truth Table (matrix of outputs)","Accepts Inherited Events (0:No, 1:Yes)"],list("mat",[-1,-2],"vec",1),exprs);
            if (!ok) {
                break;
            }
            nout = size(this.mat,2);
            nin = (log(size(this.mat,1))/log(2));
            u1 = floor(nin);
            if ((u1!=nin)) {
                block_parameter_error(msprintf("Wrong size for \'%s\' parameter: %d.","Truth Table",size(this.mat,1)),"Number of rows must be a power of two.");
                ok = false;
            } else if ((find(this.mat.slice()!=0&&this.mat.slice()!=1)!=[])) {
                block_parameter_error(msprintf("Wrong value for \'%s\' parameter.","Truth Table"),msprintf("Elements must be in the interval %s.","[0, 1]"));
                ok = false;
            } else if (this.herit<0||this.herit>1) {
                block_parameter_error(msprintf("Wrong value for \'%s\' parameter: %d.","Accepts Inherited Events",this.herit),msprintf("Must be in the interval %s.","[0, 1]"));
                ok = false;
            }
            if (ok) {
                in1 = [ones(nin,1),ones(nin,1)];
                out = [ones(nout,1),ones(nout,1)];
                it = 5*ones(1,nin);
                ot = 5*ones(1,nout);
                [model,graphics,ok] = set_io(model,graphics,list(in1,it),list(out,ot),ones(1-this.herit,1),[]);
            }
            if (ok) {
                graphics.exprs = exprs;
                this.mat = int8(this.mat);
                model.opar = list(this.mat);
                this.x.graphics = graphics;
                this.x.model = model;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
}
