/* autogenerated from "macros/Linear/DOLLAR_f.sci" */
function DOLLAR_f() {
    DOLLAR_f.prototype.define = function DOLLAR_f() {
        var z = 0;
        this.inh = 0;
        var in1 = 1;
        var exprs = string([[z],[this.inh]]);
        this.model = scicos_model();
        this.model.sim = new ScilabString(["dollar"]);
        this.model.in1 = new ScilabDouble([in1]);
        this.model.out = new ScilabDouble([in1]);
        this.model.evtin = new ScilabDouble([1-this.inh]);
        this.model.dstate = new ScilabDouble([z]);
        this.model.blocktype = new ScilabString(["d"]);
        this.model.dep_ut = [false,false];
        var gr_i = [];
        this.x = standard_define([2,2],this.model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    DOLLAR_f.prototype.details = function DOLLAR_f() {
        return this.x;
    }
    DOLLAR_f.prototype.get = function DOLLAR_f() {
        var options = {
            a:["initial condition",this.a],
            inh:["Inherit (no:0, yes:1)",this.inh],
        }
        return options;
    }
    DOLLAR_f.prototype.set = function DOLLAR_f() {
        this.a = arguments[0]["a"]
        this.inh = parseFloat(arguments[0]["inh"])
        this.x = arg1;
        var graphics = arg1.graphics;
        var exprs = graphics.exprs;
        this.model = arg1.model;
        if (size(exprs,"*")<2) {
            exprs[2-1] = "0";
        }
        while (true) {
            [ok,this.a,this.inh,exprs] = scicos_getvalue("Set 1/z block parameters",["initial condition","Inherit (no:0, yes:1)"],list("vec",-1,"vec",-1),exprs);
            if (!ok) {
                break;
            }
            var out = size(this.a,"*");
            if (out==0) {
                var out = [];
            }
            var in1 = out;
            if (ok) {
                var tmpvar0 = check_io(this.model,graphics,-1,-1,ones(1-this.inh,1),[])
                this.model = tmpvar0[0]
                var graphics = tmpvar0[1]
                var ok = tmpvar0[2];
            }
            if (ok) {
                graphics.exprs = exprs;
                this.model.dstate = new ScilabDouble([this.a]);
                this.model.in1 = in1;
                this.model.out = out;
                this.x.graphics = graphics;
                this.x.model = this.model;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
}
