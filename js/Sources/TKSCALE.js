/* autogenerated from "macros/Sources/TKSCALE.sci" */
function TKSCALE() {
    TKSCALE.prototype.define = function TKSCALE() {
        this.a = -10;
        this.b = 10;
        this.f = 1;
        model = scicos_model();
        model.sim = list("tkscaleblk",5);
        model.out = 1;
        model.evtin = 1;
        model.rpar = [[this.a],[this.b],[this.f]];
        model.blocktype = "d";
        model.dep_ut = [false,false];
        exprs = [[sci2exp(this.a)],[sci2exp(this.b)],[sci2exp(this.f)]];
        gr_i = [];
        this.x = standard_define([3,2],model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    TKSCALE.prototype.details = function TKSCALE() {
        return this.x;
    }
    TKSCALE.prototype.get = function TKSCALE() {
        var options = {
        a:["Min value",this.a],
        b:["Max value",this.b],
        f:["Normalization",this.f],
        }
        return options;
    }
    TKSCALE.prototype.set = function TKSCALE() {
        this.a = parseFloat((arguments[0]["a"]))
        this.b = parseFloat((arguments[0]["b"]))
        this.f = parseFloat((arguments[0]["f"]))
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        model = arg1.model;
        [ok,this.a,this.b,this.f,exprs] = scicos_getvalue("Set scale block parameters",["Min value","Max value","Normalization"],list("vec",1,"vec",1,"vec",1),exprs);
        if (ok) {
            graphics.exprs = exprs;
            model.rpar = [[this.a],[this.b],[this.f]];
            this.x.graphics = graphics;
            this.x.model = model;
        }
        return new BasicBlock(this.x);
    }
}
