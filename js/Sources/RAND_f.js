/* autogenerated from "macros/Sources/RAND_f.sci" */
function RAND_f() {
    RAND_f.prototype.define = function RAND_f() {
        this.a = 0;
        this.b = 1;
        dt = 0;
        out = 1;
        this.flag = 0;
        model = scicos_model();
        model.sim = "rndblk";
        model.out = out;
        model.evtin = 1;
        model.dstate = [[int(rand()*(10^7-1))],[0*this.a.slice()]];
        model.rpar = [[this.a.slice()],[this.b.slice()]];
        model.ipar = this.flag;
        model.blocktype = "d";
        model.dep_ut = [false,false];
        exprs = [[string(this.flag)],[sci2exp(this.a.slice())],[sci2exp(this.b.slice())],[string(model.dstate[1-1])]];
        gr_i = [];
        this.x = standard_define([3,2],model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    RAND_f.prototype.details = function RAND_f() {
        return this.x;
    }
    RAND_f.prototype.get = function RAND_f() {
    }
    RAND_f.prototype.set = function RAND_f() {
        this.flag = parseFloat((arguments[0]["flag"]))
        this.a = parseFloat((arguments[0]["a"]))
        this.b = parseFloat((arguments[0]["b"]))
        this.seed_c = parseFloat((arguments[0]["seed_c"]))
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        model = arg1.model;
        if (size(exprs,"*")==5) {
            exprs = exprs.slice(1-1,3);
        }
        if (size(exprs,"*")==3) {
            exprs = [[exprs],[string(model.dstate[1-1])]];
        }
        while (true) {
            [ok,this.flag,this.a,this.b,this.seed_c,exprs] = scicos_getvalue([["Set Random generator block parameters"],["flag = 0 : Uniform distribution A is min and A+B max"],["flag = 1 : Normal distribution A is mean and B deviation"],[" "],["A and B must be vector with equal sizes"],["seed is the seed of random number generator (integer<2**31)"]],["flag","A","B","seed"],list("vec",1,"vec",-1,"vec","size(%2,\'*\')","vec",1),exprs);
            if (!ok) {
                break;
            }
            if (this.flag!=0&&this.flag!=1) {
                message("flag must be equal to 1 or 0");
            } else {
                nout = size(this.a,"*");
                graphics.exprs = exprs;
                model.out = nout;
                model.ipar = this.flag;
                model.rpar = [[this.a.slice()],[this.b.slice()]];
                model.dstate = [[this.seed_c],[0*this.a.slice()]];
                this.x.graphics = graphics;
                this.x.model = model;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
}
