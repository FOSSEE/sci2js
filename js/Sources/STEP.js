/* autogenerated from "macros/Sources/STEP.sci" */
function STEP() {
    STEP.prototype.define = function STEP() {
        rpar = [[0],[1]];
        model = scicos_model();
        model.sim = list("step_func",4);
        model.evtin = 1;
        model.evtout = 1;
        model.out = 1;
        model.out2 = 1;
        model.outtyp = 1;
        model.firing = 1;
        model.rpar = rpar;
        model.blocktype = "c";
        model.dep_ut = [false,false];
        exprs = [[string(1)],[string(rpar)]];
        gr_i = [];
        this.x = standard_define([2,2],model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    STEP.prototype.details = function STEP() {
        return this.x;
    }
    STEP.prototype.get = function STEP() {
    }
    STEP.prototype.set = function STEP() {
        this.temps = parseFloat((arguments[0]["temps"]))
        this.in1 = parseFloat((arguments[0]["in1"]))
        this.fi = parseFloat((arguments[0]["fi"]))
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        model = arg1.model;
        while (true) {
            [ok,this.temps,this.in1,this.fi,exprs] = scicos_getvalue([[msprintf("Set %s block parameters","STEP_FUNCTION")],[" "],["Step Function"],[" "]],["Step Time","Initial Value","Final Value"],list("vec",1,"vec",-1,"vec",-1),exprs);
            if (!ok) {
                break;
            }
            this.in1 = this.in1.slice();
            this.fi = this.fi.slice();
            if (size(this.in1,"*")!=size(this.fi,"*")) {
                if (size(this.in1,"*")==1) {
                    this.in1 = this.in1*ones(this.fi);
                } else if (size(this.fi,"*")==1) {
                    this.fi = this.fi*ones(this.in1);
                } else {
                    block_parameter_error(msprintf("\'Initial Value\' and \'Final Value\': incompatible sizes: %d and %d.",size(this.in1,"*"),size(this.fi,"*")),"Same sizes expected.");
                    ok = false;
                }
            }
            if (ok) {
                model.out2 = 1;
                model.outtyp = 1;
                [model,graphics,ok] = check_io(model,graphics,[],size(this.fi,"*"),1,1);
            }
            if (ok) {
                model.firing = this.temps;
                if (this.temps==0) {
                    rpar = [[this.fi],[this.fi]];
                } else {
                    rpar = [[this.in1],[this.fi]];
                }
                model.rpar = rpar;
                graphics.exprs = exprs;
                this.x.graphics = graphics;
                this.x.model = model;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
}
