/* autogenerated from "macros/Sources/RAND_m.sci" */
function RAND_m() {
    RAND_m.prototype.define = function RAND_m() {
        this.a = 0;
        this.b = 1;
        dt = 0;
        this.flag = 0;
        function_name = "rndblk_m";
        funtyp = 4;
        model = scicos_model();
        model.sim = list(function_name,funtyp);
        model.in1 = [];
        model.in2 = [];
        model.intyp = [];
        model.out = 1;
        model.out2 = 1;
        model.outtyp = 1;
        model.evtin = 1;
        model.evtout = [];
        model.state = [];
        model.dstate = [[int(rand()*(10^7-1))],[0*this.a.slice()]];
        model.rpar = [this.a.slice(),this.b.slice()];
        model.ipar = this.flag;
        model.blocktype = "d";
        model.firing = [];
        model.dep_ut = [false,false];
        exprs = [[sci2exp(1)],[string(this.flag)],[sci2exp([this.a])],[sci2exp([this.b])],[sci2exp([model.dstate[1-1],int(rand()*(10^7-1))])]];
        gr_i = [];
        this.x = standard_define([3,2],model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    RAND_m.prototype.details = function RAND_m() {
        return this.x;
    }
    RAND_m.prototype.get = function RAND_m() {
    }
    RAND_m.prototype.set = function RAND_m() {
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        model = arg1.model;
        if (size(exprs,"*")==14) {
            exprs[9-1] = [];
        }
        while (true) {
            [ok,this.typ,this.flag,this.a,this.b,this.seed_c,exprs] = scicos_getvalue([["Set Random generator block parameters"],["flag = 0 : Uniform distribution A is min and A+B max"],["flag = 1 : Normal distribution A is mean and B deviation"],[" "],["A and B must be matrix with equal sizes"]],[["Datatype(1=real double  2=complex)"],["flag"],["A"],["B"],["SEED"]],list("vec",1,"vec",1,"mat",[-1,-2],"mat","[-1 -2]","mat",[1,2]),exprs);
            if (!ok) {
                break;
            }
            if (this.flag!=0&&this.flag!=1) {
                message("flag must be equal to 1 or 0");
            } else {
                out = size(this.a);
                if (this.typ==1) {
                    function_name = "rndblk_m";
                    model.rpar = [[real(this.a.slice())],[real(this.b.slice())]];
                    model.dstate = [[this.seed_c[1-1]],[0*real(this.a.slice())]];
                    ot = 1;
                } else if (this.typ==2) {
                    function_name = "rndblkz_m";
                    ot = 2;
                    model.rpar = [[real(this.a.slice())],[imag(this.a.slice())],[real(this.b.slice())],[imag(this.b.slice())]];
                    model.dstate = [[this.seed_c.slice()],[0*[[real(this.a.slice())],[imag(this.a.slice())]]]];
                } else {
                    message("Datatype is not supported");
                    ok = false;
                }
                if (ok) {
                    [model,graphics,ok] = set_io(model,graphics,list([],[]),list(out,ot),1,[]);
                    if (ok) {
                        model.sim = list(function_name,4);
                        graphics.exprs = exprs;
                        model.ipar = this.flag;
                        this.x.graphics = graphics;
                        this.x.model = model;
                        break;
                    }
                }
            }
        }
        return new BasicBlock(this.x);
    }
}
