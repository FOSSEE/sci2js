/* autogenerated from "macros/Sources/CONST_f.sci" */
function CONST_f() {
    CONST_f.prototype.define = function CONST_f() {
        this.C = 1;
        this.model = scicos_model();
        this.model.sim = list(new ScilabString(["cstblk"]), new ScilabDouble([1]));
        this.model.in1 = [];
        this.model.out = new ScilabDouble([1]);
        this.model.rpar = new ScilabDouble([this.C]);
        this.model.blocktype = new ScilabString(["d"]);
        this.model.dep_ut = [false,false];
        exprs = strcat(sci2exp(this.C));
        gr_i = [];
        this.x = standard_define([2,2],this.model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    CONST_f.prototype.details = function CONST_f() {
        return this.x;
    }
    CONST_f.prototype.get = function CONST_f() {
        var options = {
        }
        return options;
    }
    CONST_f.prototype.set = function CONST_f() {
        this.C = parseFloat(arguments[0]["C"])
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        this.model = arg1.model;
        while (true) {
            [ok,this.C,exprs] = scicos_getvalue(["Set Contant Block"],"Constant",list("vec",-1),exprs);
            if (!ok) {
                break;
            }
            nout = size(this.C,"*");
            if (nout==0) {
                message("C must have at least one element");
            } else {
                this.model.rpar = this.C.slice();
                this.model.out = new ScilabDouble([nout]);
                graphics.exprs = exprs;
                this.x.graphics = graphics;
                this.x.model = this.model;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
}
