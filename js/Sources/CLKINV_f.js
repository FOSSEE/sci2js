/* autogenerated from "macros/Sources/CLKINV_f.sci" */
function CLKINV_f() {
    CLKINV_f.prototype.define = function CLKINV_f() {
        this.prt = 1;
        this.model = scicos_model();
        this.model.sim = new ScilabString(["input"]);
        this.model.evtout = new ScilabDouble([1]);
        this.model.ipar = new ScilabDouble([this.prt]);
        this.model.blocktype = new ScilabString(["d"]);
        this.model.firing = new ScilabDouble([-1]);
        this.model.dep_ut = new ScilabDouble([false,false]);
        this.exprs = string(this.prt);
        this.gr_i = new ScilabString(["xstringb(orig(1),orig(2),\"CLKINV_f\",sz(1),sz(2));"]);
        this.x = standard_define([1,1],this.model,this.exprs,this.gr_i);
        return new EventInBlock(this.x);
    }
    CLKINV_f.prototype.details = function CLKINV_f() {
        return this.x;
    }
    CLKINV_f.prototype.get = function CLKINV_f() {
        var options = {
        }
        return options;
    }
    CLKINV_f.prototype.set = function CLKINV_f() {
        this.prt = parseFloat(arguments[0]["prt"])
        this.exprs = parseFloat(arguments[0]["exprs"])
        this.exprs = this.graphics.exprs;
        this.exprs = this.exprs[1-1];
        while (true) {
            [ok,this.prt,this.exprs] = scicos_getvalue([[msprintf("Set %s block parameters","CLKINV_f")],[" "],["Event input port"],[" "]],"Port Number",list("vec",1),this.exprs);
            this.prt = int(this.prt);
            if (!ok) {
                break;
            }
            if (this.prt<=0) {
                block_parameter_error(msprintf("Wrong values for \'Port Number\' parameter: %d.",this.prt),"Strictly positive integer expected.");
            } else {
                this.model.ipar = new ScilabDouble([this.prt]);
                this.model.evtout = new ScilabDouble([1]);
                this.model.firing = new ScilabDouble([-1]);
                this.graphics.exprs = new ScilabDouble([this.exprs]);
                this.x.graphics = this.graphics;
                this.x.model = this.model;
                break;
            }
        }
        return new EventInBlock(this.x);
    }
}
