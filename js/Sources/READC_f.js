/* autogenerated from "macros/Sources/READC_f.sci" */
function READC_f() {
    READC_f.prototype.define = function READC_f() {
        frmt = "d  ";
        fname = "foo";
        lunit = 0;
        this.N = 20;
        this.M = 1;
        rpar = [];
        tmask = 0;
        this.swap = 0;
        this.offset = 1;
        this.outmask = 1;
        ievt = 0;
        nout = size(this.outmask,"*");
        ipar = [[length(fname)],[this._str2code[frmt-1]],[ievt],[this.N],[this.M],[this.swap],[this.offset],[this._str2code[fname-1]],[tmask],[this.outmask]];
        model = scicos_model();
        model.sim = list("readc",2);
        model.out = nout;
        model.evtin = 1;
        model.evtout = [];
        model.dstate = [[1],[1],[lunit],[zeros(this.N*this.M,1)]];
        model.ipar = [[length(fname)],[this._str2code[frmt-1]],[ievt],[this.N],[this.M],[this.swap],[this.offset],[this._str2code[fname-1]],[tmask],[this.outmask]];
        model.blocktype = "d";
        model.firing = -1;
        model.dep_ut = [false,false];
        exprs = [["[]"],[sci2exp(this.outmask)],[fname],[frmt],[string(this.M)],[string(this.N)],[string(this.offset)],[string(this.swap)]];
        gr_i = [];
        this.x = standard_define([4,2],model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    READC_f.prototype.details = function READC_f() {
        return this.x;
    }
    READC_f.prototype.get = function READC_f() {
    }
    READC_f.prototype.set = function READC_f() {
        this.x = arg1;
        model = this.x.model;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        out = model.out;
        dstate = model.dstate;
        ipar = model.ipar;
        imask = 9+ipar[1-1];
        tmask = ipar[imask-1];
        lunit = dstate[3-1];
        fname = exprs[3-1];
        frmt = exprs[4-1];
        while (true) {
            [ok,this.tmask1,this.outmask,this.fname1,this.frmt1,this.M,this.N,this.offset,this.swap,exprs] = scicos_getvalue([[msprintf(gettext("Set %s block parameters"),"READC_f")],[" "],[gettext("Read from C binary file")]],[[gettext("Time Record Selection")],[gettext("Outputs Record Selection")],[gettext("Input File Name")],[gettext("Input Format")],[gettext("Record Size")],[gettext("Buffer Size")],[gettext("Initial Record Index")],[gettext("Swap Mode (0:No, 1:Yes)")]],list("vec",-1,"vec",-1,"str",1,"str",1,"vec",1,"vec",1,"vec",1,"vec",1),exprs);
            if (!ok) {
                break;
            }
            this.fname1 = pathconvert(stripblanks(this.fname1),false,true);
            this.frmt1 = stripblanks(this.frmt1);
            fmts = ["s","l","d","f","c","us","ul","uc","ull","uls","ubl","ubs","dl","fl","ll","sl","db","fb","lb","sb"];
            nout = size(this.outmask,"*");
            if (prod(size(this.tmask1))>1) {
                block_parameter_error(msprintf(gettext("Wrong value for \'%s\' parameter."),gettext("Time Record Selection")),gettext("Must be a scalar or an empty matrix."));
            } else if (and(this.frmt1!=fmts)) {
                block_parameter_error(msprintf(gettext("Wrong value for \'%s\' parameter: %s."),gettext("Input Format"),this.frmt1),gettext("Valid formats are: "+strcat(fmts,", ")));
            } else if (this.alreadyran&&this.fname1!=fname) {
                block_parameter_error(msprintf(gettext("You cannot modify \'%s\' when running"),gettext("Input File Name")),gettext("End current simulation first."));
            } else if (this.N!=ipar[6-1]&&this.alreadyran) {
                block_parameter_error(msprintf(gettext("You cannot modify \'%s\' when running."),gettext("Buffer Size")),gettext("End current simulation first"));
            } else if (this.alreadyran&&size(this.tmask1)!=size(tmask)) {
                block_parameter_error(msprintf(gettext("You cannot modify \'%s\' when running."),gettext("Time Record Selection")),gettext("End current simulation first."));
            } else if (this.fname1=="") {
                block_parameter_error(msprintf(gettext("Wrong value for \'%s\' parameter."),gettext("Input File Name")),gettext("You must provide a file name."));
            } else if (this.M<1) {
                block_parameter_error(msprintf(gettext("Wrong value for \'%s\' parameter: %d."),gettext("Record Size"),this.M),gettext("Strictly positive integer expected."));
            } else if (this.tmask1!=[]&&(this.tmask1<1||this.tmask1>this.M)) {
                block_parameter_error(msprintf(gettext("Wrong value for  \'%s\' parameter: %d."),gettext("Time Record Selection"),this.tmask1),msprintf(gettext("Must be in the interval %s."),gettext("[1, Record Size = ")+string(this.M)+"]"));
            } else if (nout==0) {
                block_parameter_error(msprintf(gettext("Wrong value for \'%s\' parameter: %d."),gettext("Outputs Record Selection"),nout),gettext("Strictly positive integer expected."));
            } else if (nout>this.M) {
                block_parameter_error(msprintf(gettext("Wrong value for \'%s\' parameter: %d."),gettext("Outputs Record Selection"),nout),msprintf(gettext("Must be in the interval %s."),gettext("[1, Record Size = ")+string(this.M)+"]"));
            } else if (max(this.outmask)>this.M||min(this.outmask)<1) {
                block_parameter_error(msprintf(gettext("Wrong value for indexes in \'%s\' parameter: %s."),gettext("Outputs Record Selection"),strcat(string(this.outmask.slice())," ")),msprintf(gettext("Must be in the interval %s."),gettext("[1, Record Size = ")+string(this.M)+"]"));
            } else if (this.N<1) {
                block_parameter_error(msprintf(gettext("Wrong value for \'%s\' parameter: %d."),gettext("Buffer Size"),this.N),gettext("Strictly positive integer expected."));
            } else if (this.swap!=0&&this.swap!=1) {
                block_parameter_error(msprintf(gettext("Wrong value for  \'%s\' parameter: %d."),gettext("Swap Mode"),this.swap),msprintf(gettext("Must be in the interval %s."),"[0, 1]"));
            } else if (this.offset<1) {
                block_parameter_error(msprintf(gettext("Wrong value for \'%s\' parameter: %d."),gettext("Initial Record Index"),this.offset),gettext("Strictly positive integer expected."));
            } else {
                if (this.tmask1==[]) {
                    ievt = 0;
                    this.tmask1 = 0;
                    outpt = [];
                } else {
                    ievt = 1;
                    outpt = 1;
                }
                out = size(this.outmask,"*");
                [model,graphics,ok] = check_io(model,graphics,[],out,1,outpt);
                this.frmt1 = part(this.frmt1,1,3);
                if (ok) {
                    if (ievt==0) {
                        model.firing = -1;
                    } else {
                        model.firing = 0;
                    }
                    ipar = [[length(this.fname1)],[this._str2code[this.frmt1-1]],[ievt],[this.N],[this.M],[this.swap],[this.offset],[this._str2code[this.fname1-1]],[this.tmask1],[this.outmask.slice()]];
                    if (prod(size(dstate))!=(this.N*this.M)+3) {
                        dstate = [[-1],[-1],[lunit],[zeros(this.N*this.M,1)]];
                    }
                    model.dstate = dstate;
                    model.ipar = ipar;
                    graphics.exprs = exprs;
                    this.x.graphics = graphics;
                    this.x.model = model;
                    break;
                }
            }
        }
        return new BasicBlock(this.x);
    }
}
