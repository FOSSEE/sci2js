/* autogenerated from "macros/Sources/RFILE_f.sci" */
function RFILE_f() {
    RFILE_f.prototype.define = function RFILE_f() {
        out = 1;
        nout = sum(out);
        frmt = "(7(e10.3,1x))";
        fname = "foo";
        lunit = 0;
        this.N = 2;
        rpar = [];
        tmask = 0;
        this.outmask = 1;
        ipar = [[length(fname)],[length(frmt)],[0],[this.N],[this._str2code[fname-1]],[this._str2code[frmt-1]],[tmask],[this.outmask]];
        dstate = [[1],[1],[lunit],[zeros((nout)*this.N,1)]];
        model = scicos_model();
        model.sim = "readf";
        model.out = nout;
        model.evtin = 1;
        model.dstate = dstate;
        model.ipar = [[length(fname)],[length(frmt)],[0],[this.N],[this._str2code[fname-1]],[this._str2code[frmt-1]],[tmask],[this.outmask]];
        model.blocktype = "d";
        model.dep_ut = [false,false];
        exprs = [[sci2exp([])],[sci2exp(this.outmask)],[fname],[frmt],[string(this.N)],[sci2exp(out)]];
        gr_i = [];
        this.x = standard_define([3,2],model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    RFILE_f.prototype.details = function RFILE_f() {
        return this.x;
    }
    RFILE_f.prototype.get = function RFILE_f() {
    }
    RFILE_f.prototype.set = function RFILE_f() {
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        model = arg1.model;
        dstate = model.dstate;
        ipar = model.ipar;
        ievt = ipar[3-1];
        this.N = ipar[4-1];
        imask = 5+ipar[1-1]+ipar[2-1];
        tmask = ipar[imask-1];
        lunit = dstate[3-1];
        fname = exprs[3-1];
        frmt = exprs[4-1];
        if (size(exprs,"*")>5) {
            exprs[6-1] = [];
        }
        while (true) {
            [ok,this.tmask1,this.outmask,this.fname1,this.frmt1,this.N,exprs] = scicos_getvalue([[msprintf(gettext("Set %s block parameters"),"RFILE_f")],[" "],[gettext("Read from an input file")],[" "],[gettext("Read is done on:")],[gettext("&nbsp; - A binary file if no format given")],[gettext("&nbsp; - A formatted text file if a  format (fortran type) is given")]],[[gettext("Time Record Selection")],[gettext("Outputs Record Selection")],[gettext("Input File Name")],[gettext("Input Format")],[gettext("Buffer Size")]],list("vec",-1,"vec",-1,"str",1,"str",1,"vec",1),exprs);
            if (!ok) {
                break;
            }
            this.fname1 = pathconvert(stripblanks(this.fname1),false,true);
            this.frmt1 = stripblanks(this.frmt1);
            nout = size(this.outmask,"*");
            if (prod(size(this.tmask1))>1) {
                block_parameter_error(msprintf(gettext("Wrong value for \'%s\' parameter: %s."),gettext("Time Record Selection"),strcat(string(this.tmask1.slice())," ")),gettext("Empty matrix or scalar expected."));
            } else if (this.tmask1!=[]&&this.tmask1<1) {
                block_parameter_error(msprintf(gettext("Wrong value for \'%s\' parameter: %d"),gettext("Time Record Selection"),this.tmask1),gettext("Strictly positive integer expected."));
            } else if (lunit>0&&min(length(frmt),1)!=min(length(this.frmt1),1)) {
                block_parameter_error([gettext("Simulation running !!! You cannot switch <br />between formatted and unformatted")],gettext("End current simulation first."));
            } else if (lunit>0&&this.fname1!=fname) {
                block_parameter_error(gettext("Simulation running !!! You cannot modify \'Input File Name\'"),gettext("End current simulation first."));
            } else if (lunit>0&&size(this.tmask1)!=size(tmask)) {
                block_parameter_error(gettext("Simulation running !!! You cannot modify \'Time Record Selection\'"),gettext("End current simulation first."));
            } else if (this.fname1=="") {
                block_parameter_error(msprintf(gettext("Wrong value for \'%s\' parameter: %s"),gettext("Input File Name"),this.fname1),gettext("You must provide a filename."));
            } else if (this.frmt1!=""&&(part(this.frmt1,1)!="("||part(this.frmt1,length(this.frmt1))!=")")) {
                block_parameter_error(msprintf(gettext("Wrong format for \'%s\' parameter: %s."),gettext("Input Format"),this.frmt1),gettext("You must enclose the format\'s string between parentheses."));
            } else if (this.N<2) {
                block_parameter_error(msprintf(gettext("Wrong value for \'%s\' parameter: %d."),gettext("Buffer Size"),this.N),gettext("Buffer size must be at least 2."));
            } else if (nout==0) {
                block_parameter_error(msprintf(gettext("Wrong value for \'%s\' parameter: %d."),gettext("Outputs Record Selection"),nout),gettext("You must read at least one field in record."));
            } else if (min(this.outmask)<1) {
                block_parameter_error(msprintf(gettext("Wrong value for \'%s\' parameter: %s"),gettext("Outputs Record Selection"),strcat(string(this.outmask.slice())," ")),gettext("Strictly positive indexes expected."));
            } else {
                if (this.tmask1==[]) {
                    ievt = 0;
                    cout = [];
                    this.tmask1 = 0;
                } else {
                    ievt = 1;
                    cout = 1;
                }
                [model,graphics,ok] = check_io(model,graphics,[],nout,1,cout);
                if (ok) {
                    if (ievt==0) {
                        model.firing = [];
                    } else {
                        model.firing = 0;
                    }
                    ipar = [[length(this.fname1)],[length(this.frmt1)],[ievt],[this.N],[this._str2code[this.fname1-1]],[this._str2code[this.frmt1-1]],[this.tmask1],[this.outmask.slice()]];
                    if (prod(size(dstate))!=(nout+ievt)*this.N+3) {
                        dstate = [[-1],[-1],[lunit],[zeros((nout+ievt)*this.N,1)]];
                    }
                    model.dstate = dstate;
                    model.ipar = ipar;
                    graphics.exprs = exprs;
                    this.x.graphics = graphics;
                    this.x.model = model;
                    break;
                }
            }
        }
        return new BasicBlock(this.x);
    }
}
