/* autogenerated from "macros/Sources/CONST.sci" */
function CONST() {
    CONST.prototype.define = function CONST() {
        this.C = 1;
        this.model = scicos_model();
        this.model.sim = list(new ScilabString(["cstblk4"]), new ScilabDouble([4]));
        this.model.in = new ScilabDouble([]);
        this.model.out = new ScilabDouble([1]);
        this.model.rpar = new ScilabDouble([this.C]);
        this.model.blocktype = new ScilabString(["d"]);
        this.model.dep_ut = new ScilabBoolean([false,false]);
        var exprs = strcat(sci2exp(this.C));
        var gr_i = new ScilabString(["xstringb(orig(1),orig(2),\"CONST\",sz(1),sz(2));"]);
        this.x = new standard_define(new ScilabDouble([2,2]),this.model,new ScilabDouble([exprs]),gr_i);
        return new BasicBlock(this.x);
    }
    CONST.prototype.details = function CONST() {
        return this.x;
    }
    CONST.prototype.get = function CONST() {
        var exprs = this.graphics.exprs;
        this.set_param_popup_title = "Set Contant Block";
        var options = {
            C:["Constant",this.C],
        }
        return options;
    }
    CONST.prototype.set = function CONST() {
        var exprs = this.graphics.exprs;
        while (true) {
            var ok = true;
            this.C = parseFloat(arguments[0]["C"]);
            var exprs = [arguments[0]["C"]];
            if (!ok) {
                break;
            }
            var sz = size(this.C);
            var nout = size(this.C,"*");
            if (nout==0) {
                message("C must have at least one element");
                throw "user error";
            } else if (and(sz>1)) {
                message("C matrix is not supported, use CONST_m instead");
                throw "user error";
            } else {
                this.model.rpar = new ScilabDouble(this.C.slice());
                this.model.out = new ScilabDouble([nout]);
                this.graphics.exprs = new ScilabDouble([exprs]);
                this.x.graphics = this.graphics;
                this.x.model = this.model;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
    CONST.prototype.get_popup_title = function CONST() {
        return this.set_param_popup_title;
    }
}
