/* autogenerated from "macros/Sources/GENSQR_f.sci" */
function GENSQR_f() {
    GENSQR_f.prototype.define = function GENSQR_f() {
        this.Amplitude = 1;
        this.model = scicos_model();
        this.model.sim = new ScilabString(["gensqr"]);
        this.model.out = new ScilabDouble([1]);
        this.model.out2 = new ScilabDouble([1]);
        this.model.outtyp = new ScilabDouble([1]);
        this.model.evtin = new ScilabDouble([1]);
        this.model.dstate = new ScilabDouble([this.Amplitude]);
        this.model.blocktype = new ScilabString(["d"]);
        this.model.dep_ut = [false,false];
        exprs = string(this.Amplitude);
        gr_i = [];
        this.x = standard_define([3,2],this.model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    GENSQR_f.prototype.details = function GENSQR_f() {
        return this.x;
    }
    GENSQR_f.prototype.get = function GENSQR_f() {
        var options = {
            Amplitude:["Amplitude",this.Amplitude],
        }
        return options;
    }
    GENSQR_f.prototype.set = function GENSQR_f() {
        this.Amplitude = parseFloat(arguments[0]["Amplitude"])
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        this.model = arg1.model;
        if (size(exprs,"*")==2) {
            exprs = exprs[2-1];
        }
        while (true) {
            [ok,this.Amplitude,exprs] = scicos_getvalue(["Set Square generator block parameters"],["Amplitude"],list("vec",1),exprs);
            if (!ok) {
                break;
            }
            graphics.exprs = exprs;
            this.model.dstate = new ScilabDouble([this.Amplitude]);
            this.model.out2 = new ScilabDouble([1]);
            this.model.outtyp = new ScilabDouble([1]);
            this.x.graphics = graphics;
            this.x.model = this.model;
            break;
        }
        return new BasicBlock(this.x);
    }
}
