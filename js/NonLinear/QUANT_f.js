/* autogenerated from "macros/NonLinear/QUANT_f.sci" */
function QUANT_f() {
    QUANT_f.prototype.define = function QUANT_f() {
        this.pas = 0.1;
        this.meth = 1;
        this.model = scicos_model();
        this.model.sim = new ScilabString(["qzrnd"]);
        this.model.in = new ScilabDouble([-1]);
        this.model.out = new ScilabDouble([-1]);
        this.model.rpar = new ScilabDouble([this.pas]);
        this.model.ipar = new ScilabDouble([this.meth]);
        this.model.blocktype = new ScilabString(["c"]);
        this.model.dep_ut = new ScilabBoolean([true,false]);
        this.exprs = [[string(this.pas)],[string(this.meth)]];
        this.gr_i = new ScilabString(["xstringb(orig(1),orig(2),\"QUANT_f\",sz(1),sz(2));"]);
        this.x = new standard_define(new ScilabDouble([2,2]),this.model,new ScilabDouble(this.exprs),this.gr_i);
        return new BasicBlock(this.x);
    }
    QUANT_f.prototype.details = function QUANT_f() {
        return this.x;
    }
    QUANT_f.prototype.get = function QUANT_f() {
        var options = {
            pas:["Step",this.pas],
            meth:["Quantization Type (1-4)",this.meth],
        }
        return options;
    }
    QUANT_f.prototype.set = function QUANT_f() {
        this.exprs = this.graphics.exprs;
        while (true) {
            var ok = true;
            this.pas = parseFloat(arguments[0]["pas"]);
            this.meth = parseFloat(arguments[0]["meth"]);
            if (!ok) {
                break;
            }
            if (this.meth<1||this.meth>4) {
                message("Quantization Type must be from 1 to 4");
                throw "user error";
            } else {
                var rpar = this.pas;
                this.model.rpar = new ScilabDouble([rpar]);
                this.model.ipar = new ScilabDouble([this.meth]);
                switch (this.meth) {
                case 1:
                    this.model.sim = new ScilabString(["qzrnd"]);
                case 2:
                    this.model.sim = new ScilabString(["qztrn"]);
                case 3:
                    this.model.sim = new ScilabString(["qzflr"]);
                case 4:
                    this.model.sim = new ScilabString(["qzcel"]);
                }
                this.graphics.exprs = new ScilabDouble([this.exprs]);
                this.x.graphics = this.graphics;
                this.x.model = this.model;
                break;
            }
        }
        return new BasicBlock(this.x);
    }
}
