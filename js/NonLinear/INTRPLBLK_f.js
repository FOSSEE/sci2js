/* autogenerated from "macros/NonLinear/INTRPLBLK_f.sci" */
function INTRPLBLK_f() {
    INTRPLBLK_f.prototype.define = function INTRPLBLK_f() {
        this.a = [[0],[1]];
        this.b = [[0],[1]];
        this.model = scicos_model();
        this.model.sim = new ScilabString(["intrpl"]);
        this.model.in1 = new ScilabDouble([1]);
        this.model.out = new ScilabDouble([1]);
        this.model.rpar = new ScilabDouble([this.a],[this.b]);
        this.model.blocktype = new ScilabString(["c"]);
        this.model.dep_ut = new ScilabDouble([true,false]);
        var exprs = [[strcat(sci2exp(this.a))],[strcat(sci2exp(this.b))]];
        var gr_i = [];
        this.x = standard_define([2,2],this.model,exprs,gr_i);
        return new BasicBlock(this.x);
    }
    INTRPLBLK_f.prototype.details = function INTRPLBLK_f() {
        return this.x;
    }
    INTRPLBLK_f.prototype.get = function INTRPLBLK_f() {
        var options = {
            a:["X coord.",this.a.toString().replace(/,/g," ")],
            b:["Y coord.",this.b.toString().replace(/,/g," ")],
        }
        return options;
    }
    INTRPLBLK_f.prototype.set = function INTRPLBLK_f() {
        this.a = inverse(arguments[0]["a"])
        this.b = inverse(arguments[0]["b"])
        this.x = arg1;
        this.graphics = arg1.graphics;
        var exprs = this.graphics.exprs;
        this.model = arg1.model;
        while (true) {
            [ok,this.a,this.b,exprs] = scicos_getvalue("Set Interpolation block parameters",["X coord.","Y coord."],list("vec",-1,"vec",-1),exprs);
            if (!ok) {
                break;
            }
            if (size(this.a,"*")!=size(this.b,"*")) {
                message("X and Y must have the same size");
            } else if (min(this.a.slice(2-1,$)-this.a.slice(1-1,$-1))<=0) {
                message("X must be strictly increasing");
            } else {
                if (ok) {
                    this.graphics.exprs = new ScilabDouble([exprs]);
                    this.model.rpar = new ScilabDouble([this.a.slice()],[this.b.slice()]);
                    this.x.graphics = this.graphics;
                    this.x.model = this.model;
                    break;
                }
            }
        }
        return new BasicBlock(this.x);
    }
}
