/* autogenerated from "macros/NonLinear/INTRPLBLK_f.sci" */
function INTRPLBLK_f() {
    INTRPLBLK_f.prototype.define = function INTRPLBLK_f() {
        this.a = [[0],[1]];
        this.b = [[0],[1]];
        this.model = scicos_model();
        this.model.sim = new ScilabString(["intrpl"]);
        this.model.in = new ScilabDouble([1]);
        this.model.out = new ScilabDouble([1]);
        this.model.rpar = new ScilabDouble([this.a],[this.b]);
        this.model.blocktype = new ScilabString(["c"]);
        this.model.dep_ut = new ScilabBoolean([true,false]);
        var exprs = [[strcat(sci2exp(this.a))],[strcat(sci2exp(this.b))]];
        var gr_i = new ScilabString(["xstringb(orig(1),orig(2),\"INTRPLBLK_f\",sz(1),sz(2));"]);
        this.x = new standard_define(new ScilabDouble([2,2]),this.model,new ScilabDouble(exprs),gr_i);
        return new BasicBlock(this.x);
    }
    INTRPLBLK_f.prototype.details = function INTRPLBLK_f() {
        return this.x;
    }
    INTRPLBLK_f.prototype.get = function INTRPLBLK_f() {
        var options = {
            a:["X coord.",this.a.toString().replace(/,/g," ")],
            b:["Y coord.",this.b.toString().replace(/,/g," ")],
        }
        return options;
    }
    INTRPLBLK_f.prototype.set = function INTRPLBLK_f() {
        var exprs = this.graphics.exprs;
        while (true) {
            var ok = true;
            this.a = inverse(arguments[0]["a"]);
            this.b = inverse(arguments[0]["b"]);
            if (!ok) {
                break;
            }
            if (size(this.a,"*")!=size(this.b,"*")) {
                message("X and Y must have the same size");
                throw "user error";
            } else if (min(this.a.slice(2-1,$)-this.a.slice(1-1,$-1))<=0) {
                message("X must be strictly increasing");
                throw "user error";
            } else {
                if (ok) {
                    this.graphics.exprs = new ScilabDouble([exprs]);
                    this.model.rpar = new ScilabDouble([this.a.slice()],[this.b.slice()]);
                    this.x.graphics = this.graphics;
                    this.x.model = this.model;
                    break;
                }
            }
        }
        return new BasicBlock(this.x);
    }
}
