/* autogenerated from "macros/Electrical/Inductor.sci" */
function Inductor() {
    Inductor.prototype.define = function Inductor() {
        this.model = scicos_model();
        this.model.in = new ScilabDouble([1]);
        this.model.out = new ScilabDouble([1]);
        this.L = 1.e-5;
        this.model.rpar = new ScilabDouble([this.L]);
        this.model.sim = new ScilabString(["Inductor"]);
        this.model.blocktype = new ScilabString(["c"]);
        this.model.dep_ut = new ScilabBoolean([true,false]);
        var mo = modelica();
        mo.model = "Inductor";
        mo.inputs = "p";
        mo.outputs = "n";
        mo.parameters = list("L",list(this.L));
        this.model.equations = new ScilabDouble([mo]);
        var exprs = string(this.L);
        var gr_i = new ScilabString(["xstringb(orig(1),orig(2),\"Inductor\",sz(1),sz(2));"]);
        this.x = new standard_define(new ScilabDouble([2,0.9]),this.model,new ScilabString([exprs]),list(gr_i,0));
        this.x.graphics.in_implicit = ["I"];
        this.x.graphics.out_implicit = ["I"];
        return new BasicBlock(this.x);
    }
    Inductor.prototype.details = function Inductor() {
        return this.x;
    }
    Inductor.prototype.get = function Inductor() {
        var exprs = this.graphics.exprs;
        this.set_param_popup_title = "Set Inductor block parameter";
        var options = {
            L:["L (H)",this.L],
        }
        return options;
    }
    Inductor.prototype.set = function Inductor() {
        var exprs = this.graphics.exprs;
        while (true) {
            var ok = true;
            this.L = parseFloat(arguments[0]["L"]);
            var exprs = [arguments[0]["L"]];
            if (!ok) {
                break;
            }
            this.model.rpar = new ScilabDouble([this.L]);
            this.model.equations.parameters[2-1] = list(new ScilabDouble([this.L]));
            this.graphics.exprs = new ScilabDouble([exprs]);
            this.x.graphics = this.graphics;
            this.x.model = this.model;
            break;
        }
        return new BasicBlock(this.x);
    }
    Inductor.prototype.get_popup_title = function Inductor() {
        return this.set_param_popup_title;
    }
}
