/* autogenerated from "macros/Electrical/SineVoltage.sci" */
function SineVoltage() {
    SineVoltage.prototype.define = function SineVoltage() {
        model = scicos_model();
        model.in1 = [1];
        model.out = [1];
        this.V = 1;
        this.ph = 0;
        this.frq = 1;
        this.offset = 0;
        this.start = 0;
        model.rpar = [[this.V],[this.ph],[this.frq],[this.offset],[this.start]];
        model.sim = "SineVoltage";
        model.blocktype = "c";
        model.dep_ut = [true,false];
        mo = modelica();
        mo.model = "SineVoltage";
        mo.inputs = "p";
        mo.outputs = "n";
        mo.parameters = list([["V"],["phase"],["freqHz"],["offset"],["startTime"]],list(this.V,this.ph,this.frq,this.offset,this.start));
        model.equations = mo;
        exprs = [[string(this.V)],[string(this.ph)],[string(this.frq)],[string(this.offset)],[string(this.start)]];
        gr_i = [];
        this.x = standard_define([2,2],model,exprs,gr_i);
        this.x.graphics.in_implicit = ["I"];
        this.x.graphics.out_implicit = ["I"];
        return new BasicBlock(this.x);
    }
    SineVoltage.prototype.details = function SineVoltage() {
        return this.x;
    }
    SineVoltage.prototype.get = function SineVoltage() {
    }
    SineVoltage.prototype.set = function SineVoltage() {
        this.V = parseFloat((arguments[0]["V"]))
        this.ph = parseFloat((arguments[0]["ph"]))
        this.frq = parseFloat((arguments[0]["frq"]))
        this.offset = parseFloat((arguments[0]["offset"]))
        this.start = parseFloat((arguments[0]["start"]))
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        model = arg1.model;
        while (true) {
            [ok,this.V,this.ph,this.frq,this.offset,this.start,exprs] = scicos_getvalue("Set voltage source parameter",["Amplitude (Volt)","phase (rad)","Frequency (Hz)","Voltageoffset (V)","Timeoffset (s)"],list("vec",1,"vec",1,"vec",1,"vec",1,"vec",1),exprs);
            if (!ok) {
                break;
            }
            model.rpar = [[this.V],[this.ph],[this.frq],[this.offset],[this.start]];
            model.equations.parameters[2-1] = list(this.V,this.ph,this.frq,this.offset,this.start);
            graphics.exprs = exprs;
            this.x.graphics = graphics;
            this.x.model = model;
            break;
        }
        return new BasicBlock(this.x);
    }
}
