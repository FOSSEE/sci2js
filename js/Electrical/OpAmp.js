/* autogenerated from "macros/Electrical/OpAmp.sci" */
function OpAmp() {
    OpAmp.prototype.define = function OpAmp() {
        S = [];
        Z = [];
        this.model = scicos_model();
        this.model.sim = new ScilabString(["OpAmp"]);
        this.model.blocktype = new ScilabString(["c"]);
        this.model.dep_ut = [true,false];
        mo = modelica();
        mo.model = this.model.sim;
        mo.inputs = [["in_p"],["in_n"]];
        mo.outputs = ["out"];
        mo.parameters = list(S,Z);
        this.model.equations = new ScilabDouble([mo]);
        this.model.in1 = new ScilabDouble([ones(size(mo.inputs,"*"),1)]);
        this.model.out = new ScilabDouble([ones(size(mo.outputs,"*"),1)]);
        this.model.rpar = Z;
        exprs = string(Z);
        gr_i = [];
        this.x = standard_define([3,5],this.model,exprs,gr_i);
        this.x.graphics.in_implicit = [["I"],["I"]];
        this.x.graphics.out_implicit = ["I"];
        return new BasicBlock(this.x);
    }
    OpAmp.prototype.details = function OpAmp() {
        return this.x;
    }
    OpAmp.prototype.get = function OpAmp() {
        var options = {
            OLGain:["Open Loop Gain",this.OLGain],
            SatH:["Positive saturation voltage",this.SatH],
            SatL:["Negative saturation voltage",this.SatL],
        }
        return options;
    }
    OpAmp.prototype.set = function OpAmp() {
        this.OLGain = arguments[0]["OLGain"]
        this.SatH = arguments[0]["SatH"]
        this.SatL = arguments[0]["SatL"]
        this.x = arg1;
        graphics = arg1.graphics;
        exprs = graphics.exprs;
        this.model = arg1.model;
        while (false) {
            [ok,this.OLGain,this.SatH,this.SatL,exprs] = scicos_getvalue("Set the Operational Amplifier parameters",["Open Loop Gain","Positive saturation voltage","Negative saturation voltage"],list("vec",1,"vec",1,"vec",1),exprs);
            if (!ok) {
                break;
            }
            this.model.equations.parameters[2] = list(new ScilabDouble([this.OLGain]), new ScilabDouble([this.SatH]), new ScilabDouble([this.SatL]));
            graphics.exprs = exprs;
            this.x.graphics = graphics;
            this.x.model = this.model;
            break;
        }
        return new BasicBlock(this.x);
    }
}
